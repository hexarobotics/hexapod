
hexapod_pruebas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08009980  08009980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a70  08009a70  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a70  08009a70  0000aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a78  08009a78  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a78  08009a78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a7c  08009a7c  0000aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009a80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c48  2000006c  08009aec  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cb4  08009aec  0000bcb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce82  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd6  00000000  00000000  00027f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0002bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136a  00000000  00000000  0002d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005201  00000000  00000000  0002e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8b1  00000000  00000000  00033b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0aec  00000000  00000000  000513e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007350  00000000  00000000  00131f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00139264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009968 	.word	0x08009968

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08009968 	.word	0x08009968

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b96a 	b.w	8000f28 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	460c      	mov	r4, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14e      	bne.n	8000d16 <__udivmoddi4+0xaa>
 8000c78:	4694      	mov	ip, r2
 8000c7a:	458c      	cmp	ip, r1
 8000c7c:	4686      	mov	lr, r0
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	d962      	bls.n	8000d4a <__udivmoddi4+0xde>
 8000c84:	b14a      	cbz	r2, 8000c9a <__udivmoddi4+0x2e>
 8000c86:	f1c2 0320 	rsb	r3, r2, #32
 8000c8a:	4091      	lsls	r1, r2
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	4319      	orrs	r1, r3
 8000c96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f f68c 	uxth.w	r6, ip
 8000ca2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb07 1114 	mls	r1, r7, r4, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb04 f106 	mul.w	r1, r4, r6
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x64>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cc2:	f080 8112 	bcs.w	8000eea <__udivmoddi4+0x27e>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 810f 	bls.w	8000eea <__udivmoddi4+0x27e>
 8000ccc:	3c02      	subs	r4, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	fa1f f38e 	uxth.w	r3, lr
 8000cd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cda:	fb07 1110 	mls	r1, r7, r0, r1
 8000cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce2:	fb00 f606 	mul.w	r6, r0, r6
 8000ce6:	429e      	cmp	r6, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x94>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf2:	f080 80fc 	bcs.w	8000eee <__udivmoddi4+0x282>
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	f240 80f9 	bls.w	8000eee <__udivmoddi4+0x282>
 8000cfc:	4463      	add	r3, ip
 8000cfe:	3802      	subs	r0, #2
 8000d00:	1b9b      	subs	r3, r3, r6
 8000d02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d06:	2100      	movs	r1, #0
 8000d08:	b11d      	cbz	r5, 8000d12 <__udivmoddi4+0xa6>
 8000d0a:	40d3      	lsrs	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d905      	bls.n	8000d26 <__udivmoddi4+0xba>
 8000d1a:	b10d      	cbz	r5, 8000d20 <__udivmoddi4+0xb4>
 8000d1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4608      	mov	r0, r1
 8000d24:	e7f5      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000d26:	fab3 f183 	clz	r1, r3
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	d146      	bne.n	8000dbc <__udivmoddi4+0x150>
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xcc>
 8000d32:	4290      	cmp	r0, r2
 8000d34:	f0c0 80f0 	bcc.w	8000f18 <__udivmoddi4+0x2ac>
 8000d38:	1a86      	subs	r6, r0, r2
 8000d3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d0e6      	beq.n	8000d12 <__udivmoddi4+0xa6>
 8000d44:	e9c5 6300 	strd	r6, r3, [r5]
 8000d48:	e7e3      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	f040 8090 	bne.w	8000e70 <__udivmoddi4+0x204>
 8000d50:	eba1 040c 	sub.w	r4, r1, ip
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa1f f78c 	uxth.w	r7, ip
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb08 4416 	mls	r4, r8, r6, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb07 f006 	mul.w	r0, r7, r6
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x11c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x11a>
 8000d80:	4298      	cmp	r0, r3
 8000d82:	f200 80cd 	bhi.w	8000f20 <__udivmoddi4+0x2b4>
 8000d86:	4626      	mov	r6, r4
 8000d88:	1a1c      	subs	r4, r3, r0
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d92:	fb08 4410 	mls	r4, r8, r0, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb00 f707 	mul.w	r7, r0, r7
 8000d9e:	429f      	cmp	r7, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x148>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x146>
 8000dac:	429f      	cmp	r7, r3
 8000dae:	f200 80b0 	bhi.w	8000f12 <__udivmoddi4+0x2a6>
 8000db2:	4620      	mov	r0, r4
 8000db4:	1bdb      	subs	r3, r3, r7
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0x9c>
 8000dbc:	f1c1 0620 	rsb	r6, r1, #32
 8000dc0:	408b      	lsls	r3, r1
 8000dc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dcc:	fa04 f301 	lsl.w	r3, r4, r1
 8000dd0:	ea43 030c 	orr.w	r3, r3, ip
 8000dd4:	40f4      	lsrs	r4, r6
 8000dd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dda:	0c38      	lsrs	r0, r7, #16
 8000ddc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000de0:	fbb4 fef0 	udiv	lr, r4, r0
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df0:	fb0e f90c 	mul.w	r9, lr, ip
 8000df4:	45a1      	cmp	r9, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	d90a      	bls.n	8000e12 <__udivmoddi4+0x1a6>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e02:	f080 8084 	bcs.w	8000f0e <__udivmoddi4+0x2a2>
 8000e06:	45a1      	cmp	r9, r4
 8000e08:	f240 8081 	bls.w	8000f0e <__udivmoddi4+0x2a2>
 8000e0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	eba4 0409 	sub.w	r4, r4, r9
 8000e16:	fa1f f983 	uxth.w	r9, r3
 8000e1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e2a:	45a4      	cmp	ip, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x1d2>
 8000e2e:	193c      	adds	r4, r7, r4
 8000e30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e34:	d267      	bcs.n	8000f06 <__udivmoddi4+0x29a>
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0x29a>
 8000e3a:	3b02      	subs	r3, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e42:	fba0 9302 	umull	r9, r3, r0, r2
 8000e46:	eba4 040c 	sub.w	r4, r4, ip
 8000e4a:	429c      	cmp	r4, r3
 8000e4c:	46ce      	mov	lr, r9
 8000e4e:	469c      	mov	ip, r3
 8000e50:	d351      	bcc.n	8000ef6 <__udivmoddi4+0x28a>
 8000e52:	d04e      	beq.n	8000ef2 <__udivmoddi4+0x286>
 8000e54:	b155      	cbz	r5, 8000e6c <__udivmoddi4+0x200>
 8000e56:	ebb8 030e 	subs.w	r3, r8, lr
 8000e5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431e      	orrs	r6, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	e9c5 6400 	strd	r6, r4, [r5]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e750      	b.n	8000d12 <__udivmoddi4+0xa6>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f103 	lsr.w	r1, r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e80:	4094      	lsls	r4, r2
 8000e82:	430c      	orrs	r4, r1
 8000e84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e8c:	fa1f f78c 	uxth.w	r7, ip
 8000e90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e94:	fb08 3110 	mls	r1, r8, r0, r3
 8000e98:	0c23      	lsrs	r3, r4, #16
 8000e9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9e:	fb00 f107 	mul.w	r1, r0, r7
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x24c>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eae:	d22c      	bcs.n	8000f0a <__udivmoddi4+0x29e>
 8000eb0:	4299      	cmp	r1, r3
 8000eb2:	d92a      	bls.n	8000f0a <__udivmoddi4+0x29e>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ec0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec8:	fb01 f307 	mul.w	r3, r1, r7
 8000ecc:	42a3      	cmp	r3, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x276>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed8:	d213      	bcs.n	8000f02 <__udivmoddi4+0x296>
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	d911      	bls.n	8000f02 <__udivmoddi4+0x296>
 8000ede:	3902      	subs	r1, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	1ae4      	subs	r4, r4, r3
 8000ee4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee8:	e739      	b.n	8000d5e <__udivmoddi4+0xf2>
 8000eea:	4604      	mov	r4, r0
 8000eec:	e6f0      	b.n	8000cd0 <__udivmoddi4+0x64>
 8000eee:	4608      	mov	r0, r1
 8000ef0:	e706      	b.n	8000d00 <__udivmoddi4+0x94>
 8000ef2:	45c8      	cmp	r8, r9
 8000ef4:	d2ae      	bcs.n	8000e54 <__udivmoddi4+0x1e8>
 8000ef6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000efa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	e7a8      	b.n	8000e54 <__udivmoddi4+0x1e8>
 8000f02:	4631      	mov	r1, r6
 8000f04:	e7ed      	b.n	8000ee2 <__udivmoddi4+0x276>
 8000f06:	4603      	mov	r3, r0
 8000f08:	e799      	b.n	8000e3e <__udivmoddi4+0x1d2>
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	e7d4      	b.n	8000eb8 <__udivmoddi4+0x24c>
 8000f0e:	46d6      	mov	lr, sl
 8000f10:	e77f      	b.n	8000e12 <__udivmoddi4+0x1a6>
 8000f12:	4463      	add	r3, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e74d      	b.n	8000db4 <__udivmoddi4+0x148>
 8000f18:	4606      	mov	r6, r0
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e70f      	b.n	8000d40 <__udivmoddi4+0xd4>
 8000f20:	3e02      	subs	r6, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	e730      	b.n	8000d88 <__udivmoddi4+0x11c>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f38:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d013      	beq.n	8000f6c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f48:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f4c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f54:	e000      	b.n	8000f58 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f62:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e009      	b.n	8000fa4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffc7 	bl	8000f2c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf1      	blt.n	8000f90 <_write+0x16>
  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fc40 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f820 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f000 f8e4 	bl	8001190 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc8:	f000 f8b8 	bl	800113c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fcc:	f000 f888 	bl	80010e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //bool ret_init = pca9685_init(&handle_pca9685);
  //bool ret_set_freq = pca9685_set_pwm_frequency(&handle_pca9685, 50.0f);
  if ( PCA9685_ERROR == PCA9685_Init( &hi2c1 ) )
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <main+0x3c>)
 8000fd2:	f007 fc3d 	bl	8008850 <PCA9685_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd6:	f004 f9af 	bl	8005338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fda:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <main+0x40>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <main+0x44>)
 8000fe0:	f004 f9f4 	bl	80053cc <osThreadNew>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <main+0x48>)
 8000fe8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fea:	f004 f9c9 	bl	8005380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fee:	bf00      	nop
 8000ff0:	e7fd      	b.n	8000fee <main+0x36>
 8000ff2:	bf00      	nop
 8000ff4:	20000088 	.word	0x20000088
 8000ff8:	080099fc 	.word	0x080099fc
 8000ffc:	08001299 	.word	0x08001299
 8001000:	20000124 	.word	0x20000124

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	@ 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2234      	movs	r2, #52	@ 0x34
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f007 fe2b 	bl	8008c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <SystemClock_Config+0xd4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <SystemClock_Config+0xd4>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <SystemClock_Config+0xd4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <SystemClock_Config+0xd8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <SystemClock_Config+0xd8>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <SystemClock_Config+0xd8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001078:	2310      	movs	r3, #16
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800107c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001080:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001082:	2304      	movs	r3, #4
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fc58 	bl	8003948 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800109e:	f000 f99f 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 f8c6 	bl	8003250 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010ca:	f000 f989 	bl	80013e0 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	@ 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f000 fef3 	bl	8001f08 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f95a 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000088 	.word	0x20000088
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <MX_USART2_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART2_UART_Init+0x4c>)
 8001174:	f003 f928 	bl	80043c8 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f92f 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000dc 	.word	0x200000dc
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <MX_GPIO_Init+0xd0>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	4812      	ldr	r0, [pc, #72]	@ (8001264 <MX_GPIO_Init+0xd4>)
 800121c:	f000 fe5a 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001226:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <MX_GPIO_Init+0xd8>)
 8001238:	f000 fcb8 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800123c:	2320      	movs	r3, #32
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_GPIO_Init+0xd4>)
 8001254:	f000 fcaa 	bl	8001bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800

0800126c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    if ( huart == &huart2 )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_UART_RxCpltCallback+0x24>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d105      	bne.n	8001288 <HAL_UART_RxCpltCallback+0x1c>
    {
        osThreadFlagsSet (defaultTaskHandle, UART_RX_DATA_EVENT_FLAG);
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_UART_RxCpltCallback+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f004 f934 	bl	80054f0 <osThreadFlagsSet>
    }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000dc 	.word	0x200000dc
 8001294:	20000124 	.word	0x20000124

08001298 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

    /* Infinite loop */
    for(;;)
    {   
 80012a2:	466b      	mov	r3, sp
 80012a4:	461e      	mov	r6, r3
        static const uint8_t buff_size = 1;
        uint8_t buffer[buff_size];
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <StartDefaultTask+0x104>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <StartDefaultTask+0x104>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	461c      	mov	r4, r3
 80012b8:	4615      	mov	r5, r2
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	00eb      	lsls	r3, r5, #3
 80012c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c8:	00e2      	lsls	r2, r4, #3
 80012ca:	4b34      	ldr	r3, [pc, #208]	@ (800139c <StartDefaultTask+0x104>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	4698      	mov	r8, r3
 80012d4:	4691      	mov	r9, r2
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ea:	4b2c      	ldr	r3, [pc, #176]	@ (800139c <StartDefaultTask+0x104>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3307      	adds	r3, #7
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	ebad 0d03 	sub.w	sp, sp, r3
 80012f8:	466b      	mov	r3, sp
 80012fa:	3300      	adds	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
        uint32_t evt = osFlagsError;
 80012fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001302:	60fb      	str	r3, [r7, #12]
        static int32_t angulo = 0;

        //leer_comando
        HAL_UART_Receive_IT( &huart2, buffer, buff_size);
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <StartDefaultTask+0x104>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	4824      	ldr	r0, [pc, #144]	@ (80013a0 <StartDefaultTask+0x108>)
 800130e:	f003 f8ab 	bl	8004468 <HAL_UART_Receive_IT>

        osThreadFlagsClear( UART_RX_DATA_EVENT_FLAG | UART_RX_ERROR_EVENT_FLAG );
 8001312:	2003      	movs	r0, #3
 8001314:	f004 f93a 	bl	800558c <osThreadFlagsClear>

        evt = osThreadFlagsWait( UART_RX_DATA_EVENT_FLAG | UART_RX_ERROR_EVENT_FLAG,
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <StartDefaultTask+0x10c>)
 800131a:	2100      	movs	r1, #0
 800131c:	2003      	movs	r0, #3
 800131e:	f004 f973 	bl	8005608 <osThreadFlagsWait>
 8001322:	60f8      	str	r0, [r7, #12]
                          osFlagsWaitAny,
                          100000 ); //100sec

        if ( evt == UART_RX_DATA_EVENT_FLAG )
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d12a      	bne.n	8001380 <StartDefaultTask+0xe8>
        {
            if ( buffer[0] == 'd' )
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b64      	cmp	r3, #100	@ 0x64
 8001330:	d105      	bne.n	800133e <StartDefaultTask+0xa6>
            {
                angulo +=10;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <StartDefaultTask+0x110>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	330a      	adds	r3, #10
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <StartDefaultTask+0x110>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e008      	b.n	8001350 <StartDefaultTask+0xb8>
            }
            else if ( buffer[0] == 'a' )
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b61      	cmp	r3, #97	@ 0x61
 8001344:	d104      	bne.n	8001350 <StartDefaultTask+0xb8>
            {
                angulo -=10;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <StartDefaultTask+0x110>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3b0a      	subs	r3, #10
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <StartDefaultTask+0x110>)
 800134e:	6013      	str	r3, [r2, #0]
            }

            printf("angulo actual: %ld \n",angulo);
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <StartDefaultTask+0x110>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <StartDefaultTask+0x114>)
 8001358:	f007 fc34 	bl	8008bc4 <iprintf>

            if ( PCA9685_OK != PCA9685_SetServoAngle( 15, (float)angulo ) )
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <StartDefaultTask+0x110>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	200f      	movs	r0, #15
 800136e:	f007 fa13 	bl	8008798 <PCA9685_SetServoAngle>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00e      	beq.n	8001396 <StartDefaultTask+0xfe>
            {
                printf("PCA write angle ERROR");
 8001378:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <StartDefaultTask+0x118>)
 800137a:	f007 fc23 	bl	8008bc4 <iprintf>
 800137e:	e00a      	b.n	8001396 <StartDefaultTask+0xfe>
            }
        }
        else if ( evt == osFlagsErrorTimeout )//UART_RX_ERROR_EVENT_FLAG
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f113 0f02 	cmn.w	r3, #2
 8001386:	d103      	bne.n	8001390 <StartDefaultTask+0xf8>
        {
            printf("uart timeout");
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <StartDefaultTask+0x11c>)
 800138a:	f007 fc1b 	bl	8008bc4 <iprintf>
 800138e:	e002      	b.n	8001396 <StartDefaultTask+0xfe>
        }
        else //ERROR
        {
            printf("uart error reception ");
 8001390:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <StartDefaultTask+0x120>)
 8001392:	f007 fc17 	bl	8008bc4 <iprintf>
 8001396:	46b5      	mov	sp, r6
    {   
 8001398:	e783      	b.n	80012a2 <StartDefaultTask+0xa>
 800139a:	bf00      	nop
 800139c:	08009a20 	.word	0x08009a20
 80013a0:	200000dc 	.word	0x200000dc
 80013a4:	000186a0 	.word	0x000186a0
 80013a8:	20000128 	.word	0x20000128
 80013ac:	0800998c 	.word	0x0800998c
 80013b0:	080099a4 	.word	0x080099a4
 80013b4:	080099bc 	.word	0x080099bc
 80013b8:	080099cc 	.word	0x080099cc

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f000 fa59 	bl	8001884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40010000 	.word	0x40010000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_MspInit+0x54>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_MspInit+0x54>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_MspInit+0x54>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_MspInit+0x54>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_MspInit+0x54>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_MspInit+0x54>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	210f      	movs	r1, #15
 800142e:	f06f 0001 	mvn.w	r0, #1
 8001432:	f000 faff 	bl	8001a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_I2C_MspInit+0x8c>)
 80014a0:	f000 fb84 	bl	8001bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	@ 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_UART_MspInit+0x94>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d133      	bne.n	800155e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_UART_MspInit+0x98>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_UART_MspInit+0x98>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4809      	ldr	r0, [pc, #36]	@ (8001570 <HAL_UART_MspInit+0x9c>)
 800154a:	f000 fb2f 	bl	8001bac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2105      	movs	r1, #5
 8001552:	2026      	movs	r0, #38	@ 0x26
 8001554:	f000 fa6e 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001558:	2026      	movs	r0, #38	@ 0x26
 800155a:	f000 fa87 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	@ 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004400 	.word	0x40004400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_InitTick+0xd0>)
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	4a2d      	ldr	r2, [pc, #180]	@ (8001644 <HAL_InitTick+0xd0>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6453      	str	r3, [r2, #68]	@ 0x44
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_InitTick+0xd0>)
 8001596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 ff6a 	bl	8003484 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015b0:	f001 ff54 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80015b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <HAL_InitTick+0xd4>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3b01      	subs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_InitTick+0xd8>)
 80015c6:	4a22      	ldr	r2, [pc, #136]	@ (8001650 <HAL_InitTick+0xdc>)
 80015c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_InitTick+0xd8>)
 80015cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015d2:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_InitTick+0xd8>)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <HAL_InitTick+0xd8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_InitTick+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_InitTick+0xd8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015ea:	4818      	ldr	r0, [pc, #96]	@ (800164c <HAL_InitTick+0xd8>)
 80015ec:	f002 fc4a 	bl	8003e84 <HAL_TIM_Base_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11b      	bne.n	8001636 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015fe:	4813      	ldr	r0, [pc, #76]	@ (800164c <HAL_InitTick+0xd8>)
 8001600:	f002 fc9a 	bl	8003f38 <HAL_TIM_Base_Start_IT>
 8001604:	4603      	mov	r3, r0
 8001606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800160a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800160e:	2b00      	cmp	r3, #0
 8001610:	d111      	bne.n	8001636 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001612:	2019      	movs	r0, #25
 8001614:	f000 fa2a 	bl	8001a6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	d808      	bhi.n	8001630 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800161e:	2200      	movs	r2, #0
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	2019      	movs	r0, #25
 8001624:	f000 fa06 	bl	8001a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_InitTick+0xe0>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e002      	b.n	8001636 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800163a:	4618      	mov	r0, r3
 800163c:	3730      	adds	r7, #48	@ 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	431bde83 	.word	0x431bde83
 800164c:	2000012c 	.word	0x2000012c
 8001650:	40010000 	.word	0x40010000
 8001654:	20000004 	.word	0x20000004

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <NMI_Handler+0x4>

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <UsageFault_Handler+0x4>

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001696:	f002 fcbf 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000012c 	.word	0x2000012c

080016a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <USART2_IRQHandler+0x10>)
 80016aa:	f002 ff03 	bl	80044b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000dc 	.word	0x200000dc

080016b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00a      	b.n	80016e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ca:	f3af 8000 	nop.w
 80016ce:	4601      	mov	r1, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <_read+0x12>
  }

  return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800171a:	605a      	str	r2, [r3, #4]
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_isatty>:

int _isatty(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f007 fb14 	bl	8008db8 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20020000 	.word	0x20020000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000174 	.word	0x20000174
 80017c4:	20004cb8 	.word	0x20004cb8

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001824 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	@ (800182c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	@ (8001838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800181a:	f007 fad3 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7ff fbcb 	bl	8000fb8 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001830:	08009a80 	.word	0x08009a80
  ldr r2, =_sbss
 8001834:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001838:	20004cb4 	.word	0x20004cb4

0800183c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f8d8 	bl	8001a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	200f      	movs	r0, #15
 8001870:	f7ff fe80 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fdba 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000178 	.word	0x20000178

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000178 	.word	0x20000178

080018c4 <__NVIC_SetPriorityGrouping>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	@ (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff4c 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a46:	f7ff ff61 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff ffb1 	bl	80019b8 <NVIC_EncodePriority>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <__NVIC_SetPriority>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff54 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a96:	f7ff ff09 	bl	80018ac <HAL_GetTick>
 8001a9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e052      	b.n	8001b60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0216 	bic.w	r2, r2, #22
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <HAL_DMA_Abort+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0208 	bic.w	r2, r2, #8
 8001af8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0a:	e013      	b.n	8001b34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0c:	f7ff fece 	bl	80018ac <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d90c      	bls.n	8001b34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2203      	movs	r2, #3
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e015      	b.n	8001b60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e4      	bne.n	8001b0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	223f      	movs	r2, #63	@ 0x3f
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d004      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00c      	b.n	8001ba0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2205      	movs	r2, #5
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e165      	b.n	8001e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 8154 	bne.w	8001e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d005      	beq.n	8001bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d130      	bne.n	8001c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	69b9      	ldr	r1, [r7, #24]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ae 	beq.w	8001e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <HAL_GPIO_Init+0x300>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001eac <HAL_GPIO_Init+0x300>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d42:	4b5a      	ldr	r3, [pc, #360]	@ (8001eac <HAL_GPIO_Init+0x300>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4e:	4a58      	ldr	r2, [pc, #352]	@ (8001eb0 <HAL_GPIO_Init+0x304>)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb4 <HAL_GPIO_Init+0x308>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x21a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x216>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	@ (8001ebc <HAL_GPIO_Init+0x310>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x212>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec0 <HAL_GPIO_Init+0x314>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x20e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec4 <HAL_GPIO_Init+0x318>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x20a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_GPIO_Init+0x31c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x206>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a49      	ldr	r2, [pc, #292]	@ (8001ecc <HAL_GPIO_Init+0x320>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x202>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00c      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e00a      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x21c>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd8:	4935      	ldr	r1, [pc, #212]	@ (8001eb0 <HAL_GPIO_Init+0x304>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a31      	ldr	r2, [pc, #196]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a26      	ldr	r2, [pc, #152]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e88:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f ae96 	bls.w	8001bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	619a      	str	r2, [r3, #24]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e12b      	b.n	8002172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fa88 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	@ 0x24
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f6c:	f001 fa62 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8001f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a81      	ldr	r2, [pc, #516]	@ (800217c <HAL_I2C_Init+0x274>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d807      	bhi.n	8001f8c <HAL_I2C_Init+0x84>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a80      	ldr	r2, [pc, #512]	@ (8002180 <HAL_I2C_Init+0x278>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e006      	b.n	8001f9a <HAL_I2C_Init+0x92>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002184 <HAL_I2C_Init+0x27c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0e7      	b.n	8002172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a78      	ldr	r2, [pc, #480]	@ (8002188 <HAL_I2C_Init+0x280>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800217c <HAL_I2C_Init+0x274>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d802      	bhi.n	8001fdc <HAL_I2C_Init+0xd4>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	e009      	b.n	8001ff0 <HAL_I2C_Init+0xe8>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	4a69      	ldr	r2, [pc, #420]	@ (800218c <HAL_I2C_Init+0x284>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	3301      	adds	r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	495c      	ldr	r1, [pc, #368]	@ (800217c <HAL_I2C_Init+0x274>)
 800200c:	428b      	cmp	r3, r1
 800200e:	d819      	bhi.n	8002044 <HAL_I2C_Init+0x13c>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e59      	subs	r1, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fbb1 f3f3 	udiv	r3, r1, r3
 800201e:	1c59      	adds	r1, r3, #1
 8002020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002024:	400b      	ands	r3, r1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_I2C_Init+0x138>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e59      	subs	r1, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fbb1 f3f3 	udiv	r3, r1, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203e:	e051      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 8002040:	2304      	movs	r3, #4
 8002042:	e04f      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_I2C_Init+0x168>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e012      	b.n	8002096 <HAL_I2C_Init+0x18e>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	0099      	lsls	r1, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Init+0x196>
 800209a:	2301      	movs	r3, #1
 800209c:	e022      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10e      	bne.n	80020c4 <HAL_I2C_Init+0x1bc>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e58      	subs	r0, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	440b      	add	r3, r1
 80020b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Init+0x1dc>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	6809      	ldr	r1, [r1, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6911      	ldr	r1, [r2, #16]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	000186a0 	.word	0x000186a0
 8002180:	001e847f 	.word	0x001e847f
 8002184:	003d08ff 	.word	0x003d08ff
 8002188:	431bde83 	.word	0x431bde83
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	817b      	strh	r3, [r7, #10]
 80021a0:	4613      	mov	r3, r2
 80021a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fb82 	bl	80018ac <HAL_GetTick>
 80021a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	f040 80e0 	bne.w	8002378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2319      	movs	r3, #25
 80021be:	2201      	movs	r2, #1
 80021c0:	4970      	ldr	r1, [pc, #448]	@ (8002384 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fe0e 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0d3      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x50>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0cc      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d007      	beq.n	8002206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2221      	movs	r2, #33	@ 0x21
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2210      	movs	r2, #16
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	893a      	ldrh	r2, [r7, #8]
 8002236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a50      	ldr	r2, [pc, #320]	@ (8002388 <HAL_I2C_Master_Transmit+0x1f8>)
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fbc8 	bl	80029e4 <I2C_MasterRequestWrite>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e08d      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002274:	e066      	b.n	8002344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fecc 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x188>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	6a39      	ldr	r1, [r7, #32]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fec3 	bl	80030a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	2b04      	cmp	r3, #4
 800232e:	d107      	bne.n	8002340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e01a      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d194      	bne.n	8002276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a6:	f7ff fa81 	bl	80018ac <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 80d9 	bne.w	800256c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	496d      	ldr	r1, [pc, #436]	@ (8002578 <HAL_I2C_Mem_Write+0x1ec>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fd0d 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e0cc      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2C_Mem_Write+0x56>
 80023de:	2302      	movs	r3, #2
 80023e0:	e0c5      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2221      	movs	r2, #33	@ 0x21
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	@ 0x40
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a3a      	ldr	r2, [r7, #32]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a4d      	ldr	r2, [pc, #308]	@ (800257c <HAL_I2C_Mem_Write+0x1f0>)
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fb44 	bl	8002ae8 <I2C_RequestMemoryWrite>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d052      	beq.n	800250c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e081      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fdd2 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	2b04      	cmp	r3, #4
 8002480:	d107      	bne.n	8002492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11b      	bne.n	800250c <HAL_I2C_Mem_Write+0x180>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1aa      	bne.n	800246a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fdc5 	bl	80030a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e016      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	00100002 	.word	0x00100002
 800257c:	ffff0000 	.word	0xffff0000

08002580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	@ 0x30
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff f987 	bl	80018ac <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	f040 8214 	bne.w	80029d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2319      	movs	r3, #25
 80025b4:	2201      	movs	r2, #1
 80025b6:	497b      	ldr	r1, [pc, #492]	@ (80027a4 <HAL_I2C_Mem_Read+0x224>)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fc13 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e207      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Mem_Read+0x56>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e200      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d007      	beq.n	80025fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800260a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2222      	movs	r2, #34	@ 0x22
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	@ 0x40
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800262c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <HAL_I2C_Mem_Read+0x228>)
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263e:	88f8      	ldrh	r0, [r7, #6]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fae0 	bl	8002c14 <I2C_RequestMemoryRead>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1bc      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e190      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11b      	bne.n	80026ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e170      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11b      	bne.n	800270e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	e150      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002724:	e144      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	f200 80f1 	bhi.w	8002912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	2b01      	cmp	r3, #1
 8002736:	d123      	bne.n	8002780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fcfb 	bl	8003138 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e145      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800277e:	e117      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d14e      	bne.n	8002826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	2200      	movs	r2, #0
 8002790:	4906      	ldr	r1, [pc, #24]	@ (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fb26 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e11a      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000
 80027ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002824:	e0c4      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	2200      	movs	r2, #0
 800282e:	496c      	ldr	r1, [pc, #432]	@ (80029e0 <HAL_I2C_Mem_Read+0x460>)
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fad7 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0cb      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	2200      	movs	r2, #0
 800288a:	4955      	ldr	r1, [pc, #340]	@ (80029e0 <HAL_I2C_Mem_Read+0x460>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 faa9 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e09d      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002910:	e04e      	b.n	80029b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002914:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fc0e 	bl	8003138 <I2C_WaitOnRXNEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e058      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d124      	bne.n	80029b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	2b03      	cmp	r3, #3
 800296c:	d107      	bne.n	800297e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800297c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f aeb6 	bne.w	8002726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3728      	adds	r7, #40	@ 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010004 	.word	0x00010004

080029e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d006      	beq.n	8002a0e <I2C_MasterRequestWrite+0x2a>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d003      	beq.n	8002a0e <I2C_MasterRequestWrite+0x2a>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a0c:	d108      	bne.n	8002a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e00b      	b.n	8002a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	2b12      	cmp	r3, #18
 8002a26:	d107      	bne.n	8002a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f9cd 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e035      	b.n	8002ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a74:	d108      	bne.n	8002a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e01b      	b.n	8002ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	11db      	asrs	r3, r3, #7
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 0306 	and.w	r3, r3, #6
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f063 030f 	orn	r3, r3, #15
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	490e      	ldr	r1, [pc, #56]	@ (8002ae0 <I2C_MasterRequestWrite+0xfc>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa16 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e010      	b.n	8002ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4907      	ldr	r1, [pc, #28]	@ (8002ae4 <I2C_MasterRequestWrite+0x100>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa06 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00010008 	.word	0x00010008
 8002ae4:	00010002 	.word	0x00010002

08002ae8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f960 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b38:	d103      	bne.n	8002b42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e05f      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	492d      	ldr	r1, [pc, #180]	@ (8002c10 <I2C_RequestMemoryWrite+0x128>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f9bb 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e04c      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa46 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02b      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	e021      	b.n	8002c04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa20 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e005      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	00010002 	.word	0x00010002

08002c14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8c2 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c74:	d103      	bne.n	8002c7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0aa      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	4952      	ldr	r1, [pc, #328]	@ (8002de0 <I2C_RequestMemoryRead+0x1cc>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f91d 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e097      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9a8 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e076      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e021      	b.n	8002d40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f982 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e050      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d42:	6a39      	ldr	r1, [r7, #32]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f967 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e035      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f82b 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e013      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	4906      	ldr	r1, [pc, #24]	@ (8002de0 <I2C_RequestMemoryRead+0x1cc>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f886 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	00010002 	.word	0x00010002

08002de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	e048      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d044      	beq.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fd55 	bl	80018ac <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d139      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10d      	bne.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	e00c      	b.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d116      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e023      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	e00c      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d093      	beq.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee6:	e071      	b.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d123      	bne.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e067      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d041      	beq.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fe fcb0 	bl	80018ac <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d136      	bne.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10c      	bne.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e00b      	b.n	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e021      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10c      	bne.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e00b      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f af6d 	bne.w	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003024:	e034      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f8e3 	bl	80031f2 <I2C_IsAcknowledgeFailed>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d028      	beq.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fc35 	bl	80018ac <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11d      	bne.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	2b80      	cmp	r3, #128	@ 0x80
 8003060:	d016      	beq.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b80      	cmp	r3, #128	@ 0x80
 800309c:	d1c3      	bne.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f89b 	bl	80031f2 <I2C_IsAcknowledgeFailed>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e034      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d028      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fbed 	bl	80018ac <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11d      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d016      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e007      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d1c3      	bne.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003144:	e049      	b.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	d119      	bne.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0210 	mvn.w	r2, #16
 800315c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e030      	b.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe fb90 	bl	80018ac <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d016      	beq.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e4:	2b40      	cmp	r3, #64	@ 0x40
 80031e6:	d1ae      	bne.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003208:	d11b      	bne.n	8003242 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003212:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe fab4 	bl	80018ac <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fab0 	bl	80018ac <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f887 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe f8bc 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08009a24 	.word	0x08009a24
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08009a34 	.word	0x08009a34

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0b5b      	lsrs	r3, r3, #13
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08009a34 	.word	0x08009a34

08003484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	220f      	movs	r2, #15
 8003492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_RCC_GetClockConfig+0x5c>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <HAL_RCC_GetClockConfig+0x5c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <HAL_RCC_GetClockConfig+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034c6:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <HAL_RCC_GetClockConfig+0x60>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b0ae      	sub	sp, #184	@ 0xb8
 80034ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350e:	4bcb      	ldr	r3, [pc, #812]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b0c      	cmp	r3, #12
 8003518:	f200 8206 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x440>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <HAL_RCC_GetSysClockFreq+0x3c>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003559 	.word	0x08003559
 8003528:	08003929 	.word	0x08003929
 800352c:	08003929 	.word	0x08003929
 8003530:	08003929 	.word	0x08003929
 8003534:	08003561 	.word	0x08003561
 8003538:	08003929 	.word	0x08003929
 800353c:	08003929 	.word	0x08003929
 8003540:	08003929 	.word	0x08003929
 8003544:	08003569 	.word	0x08003569
 8003548:	08003929 	.word	0x08003929
 800354c:	08003929 	.word	0x08003929
 8003550:	08003929 	.word	0x08003929
 8003554:	08003759 	.word	0x08003759
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4bb9      	ldr	r3, [pc, #740]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x358>)
 800355a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800355e:	e1e7      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003560:	4bb8      	ldr	r3, [pc, #736]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003566:	e1e3      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4bb4      	ldr	r3, [pc, #720]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003574:	4bb1      	ldr	r3, [pc, #708]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d071      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4bae      	ldr	r3, [pc, #696]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800358c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	f04f 0000 	mov.w	r0, #0
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	0159      	lsls	r1, r3, #5
 80035b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b8:	0150      	lsls	r0, r2, #5
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4621      	mov	r1, r4
 80035c0:	1a51      	subs	r1, r2, r1
 80035c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80035c4:	4629      	mov	r1, r5
 80035c6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035d8:	4649      	mov	r1, r9
 80035da:	018b      	lsls	r3, r1, #6
 80035dc:	4641      	mov	r1, r8
 80035de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e2:	4641      	mov	r1, r8
 80035e4:	018a      	lsls	r2, r1, #6
 80035e6:	4641      	mov	r1, r8
 80035e8:	1a51      	subs	r1, r2, r1
 80035ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035ec:	4649      	mov	r1, r9
 80035ee:	eb63 0301 	sbc.w	r3, r3, r1
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003600:	4649      	mov	r1, r9
 8003602:	00cb      	lsls	r3, r1, #3
 8003604:	4641      	mov	r1, r8
 8003606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360a:	4641      	mov	r1, r8
 800360c:	00ca      	lsls	r2, r1, #3
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	4603      	mov	r3, r0
 8003614:	4622      	mov	r2, r4
 8003616:	189b      	adds	r3, r3, r2
 8003618:	633b      	str	r3, [r7, #48]	@ 0x30
 800361a:	462b      	mov	r3, r5
 800361c:	460a      	mov	r2, r1
 800361e:	eb42 0303 	adc.w	r3, r2, r3
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003630:	4629      	mov	r1, r5
 8003632:	024b      	lsls	r3, r1, #9
 8003634:	4621      	mov	r1, r4
 8003636:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800363a:	4621      	mov	r1, r4
 800363c:	024a      	lsls	r2, r1, #9
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800364c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003650:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003654:	f7fd faf2 	bl	8000c3c <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003662:	e067      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003664:	4b75      	ldr	r3, [pc, #468]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003670:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800367e:	2300      	movs	r3, #0
 8003680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003682:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003686:	4622      	mov	r2, r4
 8003688:	462b      	mov	r3, r5
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003698:	0150      	lsls	r0, r2, #5
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4621      	mov	r1, r4
 80036a0:	1a51      	subs	r1, r2, r1
 80036a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036a4:	4629      	mov	r1, r5
 80036a6:	eb63 0301 	sbc.w	r3, r3, r1
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036b8:	4649      	mov	r1, r9
 80036ba:	018b      	lsls	r3, r1, #6
 80036bc:	4641      	mov	r1, r8
 80036be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c2:	4641      	mov	r1, r8
 80036c4:	018a      	lsls	r2, r1, #6
 80036c6:	4641      	mov	r1, r8
 80036c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80036cc:	4649      	mov	r1, r9
 80036ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e6:	4692      	mov	sl, r2
 80036e8:	469b      	mov	fp, r3
 80036ea:	4623      	mov	r3, r4
 80036ec:	eb1a 0303 	adds.w	r3, sl, r3
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	462b      	mov	r3, r5
 80036f4:	eb4b 0303 	adc.w	r3, fp, r3
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003706:	4629      	mov	r1, r5
 8003708:	028b      	lsls	r3, r1, #10
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003710:	4621      	mov	r1, r4
 8003712:	028a      	lsls	r2, r1, #10
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800371c:	2200      	movs	r2, #0
 800371e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003720:	677a      	str	r2, [r7, #116]	@ 0x74
 8003722:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003726:	f7fd fa89 	bl	8000c3c <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4613      	mov	r3, r2
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003734:	4b41      	ldr	r3, [pc, #260]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800374a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003756:	e0eb      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4b38      	ldr	r3, [pc, #224]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003764:	4b35      	ldr	r3, [pc, #212]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d06b      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b32      	ldr	r3, [pc, #200]	@ (800383c <HAL_RCC_GetSysClockFreq+0x354>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800377a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800377c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	663b      	str	r3, [r7, #96]	@ 0x60
 8003784:	2300      	movs	r3, #0
 8003786:	667b      	str	r3, [r7, #100]	@ 0x64
 8003788:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800378c:	4622      	mov	r2, r4
 800378e:	462b      	mov	r3, r5
 8003790:	f04f 0000 	mov.w	r0, #0
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	0159      	lsls	r1, r3, #5
 800379a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379e:	0150      	lsls	r0, r2, #5
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4621      	mov	r1, r4
 80037a6:	1a51      	subs	r1, r2, r1
 80037a8:	61b9      	str	r1, [r7, #24]
 80037aa:	4629      	mov	r1, r5
 80037ac:	eb63 0301 	sbc.w	r3, r3, r1
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037be:	4659      	mov	r1, fp
 80037c0:	018b      	lsls	r3, r1, #6
 80037c2:	4651      	mov	r1, sl
 80037c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037c8:	4651      	mov	r1, sl
 80037ca:	018a      	lsls	r2, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ebb2 0801 	subs.w	r8, r2, r1
 80037d2:	4659      	mov	r1, fp
 80037d4:	eb63 0901 	sbc.w	r9, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ec:	4690      	mov	r8, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	eb18 0303 	adds.w	r3, r8, r3
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	462b      	mov	r3, r5
 80037fa:	eb49 0303 	adc.w	r3, r9, r3
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800380c:	4629      	mov	r1, r5
 800380e:	024b      	lsls	r3, r1, #9
 8003810:	4621      	mov	r1, r4
 8003812:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003816:	4621      	mov	r1, r4
 8003818:	024a      	lsls	r2, r1, #9
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003822:	2200      	movs	r2, #0
 8003824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003826:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003828:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800382c:	f7fd fa06 	bl	8000c3c <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800383a:	e065      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x420>
 800383c:	40023800 	.word	0x40023800
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003848:	4b3d      	ldr	r3, [pc, #244]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x458>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	2200      	movs	r2, #0
 8003850:	4618      	mov	r0, r3
 8003852:	4611      	mov	r1, r2
 8003854:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003858:	653b      	str	r3, [r7, #80]	@ 0x50
 800385a:	2300      	movs	r3, #0
 800385c:	657b      	str	r3, [r7, #84]	@ 0x54
 800385e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003862:	4642      	mov	r2, r8
 8003864:	464b      	mov	r3, r9
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	0159      	lsls	r1, r3, #5
 8003870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003874:	0150      	lsls	r0, r2, #5
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4641      	mov	r1, r8
 800387c:	1a51      	subs	r1, r2, r1
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	4649      	mov	r1, r9
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003894:	4659      	mov	r1, fp
 8003896:	018b      	lsls	r3, r1, #6
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389e:	4651      	mov	r1, sl
 80038a0:	018a      	lsls	r2, r1, #6
 80038a2:	4651      	mov	r1, sl
 80038a4:	1a54      	subs	r4, r2, r1
 80038a6:	4659      	mov	r1, fp
 80038a8:	eb63 0501 	sbc.w	r5, r3, r1
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	00eb      	lsls	r3, r5, #3
 80038b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ba:	00e2      	lsls	r2, r4, #3
 80038bc:	4614      	mov	r4, r2
 80038be:	461d      	mov	r5, r3
 80038c0:	4643      	mov	r3, r8
 80038c2:	18e3      	adds	r3, r4, r3
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb45 0303 	adc.w	r3, r5, r3
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038da:	4629      	mov	r1, r5
 80038dc:	028b      	lsls	r3, r1, #10
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e4:	4621      	mov	r1, r4
 80038e6:	028a      	lsls	r2, r1, #10
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038f0:	2200      	movs	r2, #0
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038fa:	f7fd f99f 	bl	8000c3c <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4613      	mov	r3, r2
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x458>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0f1b      	lsrs	r3, r3, #28
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800391a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003926:	e003      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x45c>)
 800392a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800392e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003934:	4618      	mov	r0, r3
 8003936:	37b8      	adds	r7, #184	@ 0xb8
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	00f42400 	.word	0x00f42400

08003948 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e28d      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8083 	beq.w	8003a6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003968:	4b94      	ldr	r3, [pc, #592]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b04      	cmp	r3, #4
 8003972:	d019      	beq.n	80039a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003974:	4b91      	ldr	r3, [pc, #580]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800397c:	2b08      	cmp	r3, #8
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003980:	4b8e      	ldr	r3, [pc, #568]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398c:	d00c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d112      	bne.n	80039c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4b84      	ldr	r3, [pc, #528]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x124>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d157      	bne.n	8003a6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e25a      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x90>
 80039ca:	4b7c      	ldr	r3, [pc, #496]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7b      	ldr	r2, [pc, #492]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xcc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0xb4>
 80039e2:	4b76      	ldr	r3, [pc, #472]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a75      	ldr	r2, [pc, #468]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a72      	ldr	r2, [pc, #456]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xcc>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b6c      	ldr	r3, [pc, #432]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd ff46 	bl	80018ac <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd ff42 	bl	80018ac <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e21f      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xdc>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd ff32 	bl	80018ac <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd ff2e 	bl	80018ac <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e20b      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b57      	ldr	r3, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x104>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06f      	beq.n	8003b5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a7a:	4b50      	ldr	r3, [pc, #320]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d017      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a86:	4b4d      	ldr	r3, [pc, #308]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d105      	bne.n	8003a9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a92:	4b4a      	ldr	r3, [pc, #296]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b44      	ldr	r3, [pc, #272]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x186>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e1d3      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4937      	ldr	r1, [pc, #220]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	e03a      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b34      	ldr	r3, [pc, #208]	@ (8003bc0 <HAL_RCC_OscConfig+0x278>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd fedb 	bl	80018ac <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fed7 	bl	80018ac <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1b4      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b28      	ldr	r3, [pc, #160]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4925      	ldr	r1, [pc, #148]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b24      	ldr	r3, [pc, #144]	@ (8003bc0 <HAL_RCC_OscConfig+0x278>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd feba 	bl	80018ac <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd feb6 	bl	80018ac <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e193      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d036      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_RCC_OscConfig+0x27c>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd fe9a 	bl	80018ac <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fd fe96 	bl	80018ac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e173      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x234>
 8003b9a:	e01b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9c:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fe83 	bl	80018ac <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	e00e      	b.n	8003bc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fd fe7f 	bl	80018ac <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d907      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e15c      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470000 	.word	0x42470000
 8003bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b8a      	ldr	r3, [pc, #552]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ea      	bne.n	8003baa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8097 	beq.w	8003d10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b83      	ldr	r3, [pc, #524]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c02:	4b7c      	ldr	r3, [pc, #496]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b79      	ldr	r3, [pc, #484]	@ (8003df8 <HAL_RCC_OscConfig+0x4b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1e:	4b76      	ldr	r3, [pc, #472]	@ (8003df8 <HAL_RCC_OscConfig+0x4b0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	@ (8003df8 <HAL_RCC_OscConfig+0x4b0>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fe3f 	bl	80018ac <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd fe3b 	bl	80018ac <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e118      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b6c      	ldr	r3, [pc, #432]	@ (8003df8 <HAL_RCC_OscConfig+0x4b0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x31e>
 8003c58:	4b66      	ldr	r3, [pc, #408]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	4a65      	ldr	r2, [pc, #404]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x358>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x340>
 8003c6e:	4b61      	ldr	r3, [pc, #388]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c72:	4a60      	ldr	r2, [pc, #384]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x358>
 8003c88:	4b5a      	ldr	r3, [pc, #360]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8c:	4a59      	ldr	r2, [pc, #356]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c94:	4b57      	ldr	r3, [pc, #348]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c98:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fe00 	bl	80018ac <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fdfc 	bl	80018ac <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0d7      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x368>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fdea 	bl	80018ac <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd fde6 	bl	80018ac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0c1      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	4b40      	ldr	r3, [pc, #256]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	4a3a      	ldr	r2, [pc, #232]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ad 	beq.w	8003e74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d060      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d145      	bne.n	8003dba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b33      	ldr	r3, [pc, #204]	@ (8003dfc <HAL_RCC_OscConfig+0x4b4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fdba 	bl	80018ac <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd fdb6 	bl	80018ac <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e093      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	071b      	lsls	r3, r3, #28
 8003d86:	491b      	ldr	r1, [pc, #108]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x4b4>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fd fd8b 	bl	80018ac <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd fd87 	bl	80018ac <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e064      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x452>
 8003db8:	e05c      	b.n	8003e74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <HAL_RCC_OscConfig+0x4b4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fd74 	bl	80018ac <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd fd70 	bl	80018ac <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e04d      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x480>
 8003de6:	e045      	b.n	8003e74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e040      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e00:	4b1f      	ldr	r3, [pc, #124]	@ (8003e80 <HAL_RCC_OscConfig+0x538>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d030      	beq.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d129      	bne.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d122      	bne.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d119      	bne.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d10f      	bne.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e041      	b.n	8003f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f839 	bl	8003f22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 f9c0 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e04e      	b.n	8003fee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	@ (8003ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d022      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7a:	d01d      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1f      	ldr	r2, [pc, #124]	@ (8004000 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d018      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d013      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	@ (8004008 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800400c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	@ (8004010 <HAL_TIM_Base_Start_IT+0xd8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x80>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a18      	ldr	r2, [pc, #96]	@ (8004014 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d010      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fda:	e007      	b.n	8003fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40010400 	.word	0x40010400
 8004010:	40014000 	.word	0x40014000
 8004014:	40001800 	.word	0x40001800

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0202 	mvn.w	r2, #2
 800404c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8d2 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8c4 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8d5 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8ac 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f89e 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8af 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f886 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f878 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f889 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0210 	mvn.w	r2, #16
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2208      	movs	r2, #8
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f860 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f852 	bl	80041f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f863 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd f91c 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f906 	bl	80043b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f834 	bl	8004234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0220 	mvn.w	r2, #32
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8d8 	bl	80043a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a46      	ldr	r2, [pc, #280]	@ (8004374 <TIM_Base_SetConfig+0x12c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004266:	d00f      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a43      	ldr	r2, [pc, #268]	@ (8004378 <TIM_Base_SetConfig+0x130>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00b      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a42      	ldr	r2, [pc, #264]	@ (800437c <TIM_Base_SetConfig+0x134>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a41      	ldr	r2, [pc, #260]	@ (8004380 <TIM_Base_SetConfig+0x138>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a40      	ldr	r2, [pc, #256]	@ (8004384 <TIM_Base_SetConfig+0x13c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a35      	ldr	r2, [pc, #212]	@ (8004374 <TIM_Base_SetConfig+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d027      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a32      	ldr	r2, [pc, #200]	@ (8004378 <TIM_Base_SetConfig+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d023      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a31      	ldr	r2, [pc, #196]	@ (800437c <TIM_Base_SetConfig+0x134>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a30      	ldr	r2, [pc, #192]	@ (8004380 <TIM_Base_SetConfig+0x138>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004384 <TIM_Base_SetConfig+0x13c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d017      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004388 <TIM_Base_SetConfig+0x140>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <TIM_Base_SetConfig+0x144>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004390 <TIM_Base_SetConfig+0x148>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <TIM_Base_SetConfig+0x14c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004398 <TIM_Base_SetConfig+0x150>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	@ (800439c <TIM_Base_SetConfig+0x154>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d108      	bne.n	800430c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a10      	ldr	r2, [pc, #64]	@ (8004374 <TIM_Base_SetConfig+0x12c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0xf8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <TIM_Base_SetConfig+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]
  }
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40000c00 	.word	0x40000c00
 8004384:	40010400 	.word	0x40010400
 8004388:	40014000 	.word	0x40014000
 800438c:	40014400 	.word	0x40014400
 8004390:	40014800 	.word	0x40014800
 8004394:	40001800 	.word	0x40001800
 8004398:	40001c00 	.word	0x40001c00
 800439c:	40002000 	.word	0x40002000

080043a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e042      	b.n	8004460 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd f870 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	@ 0x24
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800440a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fcdb 	bl	8004dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	d112      	bne.n	80044a8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_Receive_IT+0x26>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e00b      	b.n	80044aa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	461a      	mov	r2, r3
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 faba 	bl	8004a18 <UART_Start_Receive_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	e000      	b.n	80044aa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b0ba      	sub	sp, #232	@ 0xe8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_UART_IRQHandler+0x66>
 8004506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb99 	bl	8004c4a <UART_Receive_IT>
      return;
 8004518:	e25b      	b.n	80049d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800451a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80de 	beq.w	80046e0 <HAL_UART_IRQHandler+0x22c>
 8004524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80d1 	beq.w	80046e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <HAL_UART_IRQHandler+0xae>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_UART_IRQHandler+0xd2>
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0202 	orr.w	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_UART_IRQHandler+0xf6>
 8004592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d011      	beq.n	80045da <HAL_UART_IRQHandler+0x126>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 81f2 	beq.w	80049c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_UART_IRQHandler+0x14e>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fb24 	bl	8004c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_UART_IRQHandler+0x17a>
 8004626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d04f      	beq.n	80046ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa2c 	bl	8004a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463e:	2b40      	cmp	r3, #64	@ 0x40
 8004640:	d141      	bne.n	80046c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800465c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800466e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800467a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1d9      	bne.n	8004642 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	4a7e      	ldr	r2, [pc, #504]	@ (8004894 <HAL_UART_IRQHandler+0x3e0>)
 800469c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fa60 	bl	8001b68 <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046b8:	4610      	mov	r0, r2
 80046ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e00e      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f994 	bl	80049ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e00a      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f990 	bl	80049ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e006      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f98c 	bl	80049ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046da:	e175      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	bf00      	nop
    return;
 80046de:	e173      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 814f 	bne.w	8004988 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8148 	beq.w	8004988 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8141 	beq.w	8004988 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004726:	2b40      	cmp	r3, #64	@ 0x40
 8004728:	f040 80b6 	bne.w	8004898 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8145 	beq.w	80049cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800474a:	429a      	cmp	r2, r3
 800474c:	f080 813e 	bcs.w	80049cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004756:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	f000 8088 	beq.w	8004876 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800477c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800479e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d9      	bne.n	8004766 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e1      	bne.n	80047b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3314      	adds	r3, #20
 800480e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e3      	bne.n	80047ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004846:	f023 0310 	bic.w	r3, r3, #16
 800484a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004858:	65ba      	str	r2, [r7, #88]	@ 0x58
 800485a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800485e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e3      	bne.n	8004834 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	4618      	mov	r0, r3
 8004872:	f7fd f909 	bl	8001a88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8b7 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004892:	e09b      	b.n	80049cc <HAL_UART_IRQHandler+0x518>
 8004894:	08004b53 	.word	0x08004b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 808e 	beq.w	80049d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8089 	beq.w	80049d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80048e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e3      	bne.n	80048be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	623b      	str	r3, [r7, #32]
   return(result);
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800491a:	633a      	str	r2, [r7, #48]	@ 0x30
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e3      	bne.n	80048f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60fb      	str	r3, [r7, #12]
   return(result);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004960:	61fa      	str	r2, [r7, #28]
 8004962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	617b      	str	r3, [r7, #20]
   return(result);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e3      	bne.n	800493c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800497a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f83d 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004986:	e023      	b.n	80049d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_UART_IRQHandler+0x4f4>
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8ea 	bl	8004b7a <UART_Transmit_IT>
    return;
 80049a6:	e014      	b.n	80049d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <HAL_UART_IRQHandler+0x51e>
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f92a 	bl	8004c1a <UART_EndTransmit_IT>
    return;
 80049c6:	e004      	b.n	80049d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80049d0:	bf00      	nop
  }
}
 80049d2:	37e8      	adds	r7, #232	@ 0xe8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2222      	movs	r2, #34	@ 0x22
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0220 	orr.w	r2, r2, #32
 8004a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b095      	sub	sp, #84	@ 0x54
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ab4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3314      	adds	r3, #20
 8004ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d119      	bne.n	8004b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b24:	61ba      	str	r2, [r7, #24]
 8004b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	613b      	str	r3, [r7, #16]
   return(result);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e5      	bne.n	8004b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b46:	bf00      	nop
 8004b48:	3754      	adds	r7, #84	@ 0x54
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ff3d 	bl	80049ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b21      	cmp	r3, #33	@ 0x21
 8004b8c:	d13e      	bne.n	8004c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d114      	bne.n	8004bc2 <UART_Transmit_IT+0x48>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d110      	bne.n	8004bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	621a      	str	r2, [r3, #32]
 8004bc0:	e008      	b.n	8004bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	1c59      	adds	r1, r3, #1
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6211      	str	r1, [r2, #32]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4619      	mov	r1, r3
 8004be2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10f      	bne.n	8004c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fecc 	bl	80049d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08c      	sub	sp, #48	@ 0x30
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b22      	cmp	r3, #34	@ 0x22
 8004c5c:	f040 80ae 	bne.w	8004dbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d117      	bne.n	8004c9a <UART_Receive_IT+0x50>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d113      	bne.n	8004c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c98:	e026      	b.n	8004ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cac:	d007      	beq.n	8004cbe <UART_Receive_IT+0x74>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <UART_Receive_IT+0x82>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e008      	b.n	8004cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d15d      	bne.n	8004db8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0220 	bic.w	r2, r2, #32
 8004d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d135      	bne.n	8004dae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	613b      	str	r3, [r7, #16]
   return(result);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d68:	623a      	str	r2, [r7, #32]
 8004d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	69f9      	ldr	r1, [r7, #28]
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d10a      	bne.n	8004da0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fe2a 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
 8004dac:	e002      	b.n	8004db4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fa5c 	bl	800126c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e002      	b.n	8004dbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3730      	adds	r7, #48	@ 0x30
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b0c0      	sub	sp, #256	@ 0x100
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	68d9      	ldr	r1, [r3, #12]
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	ea40 0301 	orr.w	r3, r0, r1
 8004df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e20:	f021 010c 	bic.w	r1, r1, #12
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	6999      	ldr	r1, [r3, #24]
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	ea40 0301 	orr.w	r3, r0, r1
 8004e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b8f      	ldr	r3, [pc, #572]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d005      	beq.n	8004e68 <UART_SetConfig+0xa0>
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b8d      	ldr	r3, [pc, #564]	@ (8005098 <UART_SetConfig+0x2d0>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d104      	bne.n	8004e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe faf8 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8004e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e70:	e003      	b.n	8004e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e72:	f7fe fadf 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8004e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e84:	f040 810c 	bne.w	80050a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	1891      	adds	r1, r2, r2
 8004ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eaa:	4621      	mov	r1, r4
 8004eac:	eb12 0801 	adds.w	r8, r2, r1
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	eb43 0901 	adc.w	r9, r3, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	eb18 0303 	adds.w	r3, r8, r3
 8004ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ed8:	462b      	mov	r3, r5
 8004eda:	eb49 0303 	adc.w	r3, r9, r3
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	18db      	adds	r3, r3, r3
 8004efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efc:	4613      	mov	r3, r2
 8004efe:	eb42 0303 	adc.w	r3, r2, r3
 8004f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f0c:	f7fb fe96 	bl	8000c3c <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4b61      	ldr	r3, [pc, #388]	@ (800509c <UART_SetConfig+0x2d4>)
 8004f16:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	011c      	lsls	r4, r3, #4
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	1891      	adds	r1, r2, r2
 8004f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f38:	415b      	adcs	r3, r3
 8004f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f40:	4641      	mov	r1, r8
 8004f42:	eb12 0a01 	adds.w	sl, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb43 0b01 	adc.w	fp, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f60:	4692      	mov	sl, r2
 8004f62:	469b      	mov	fp, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	eb1a 0303 	adds.w	r3, sl, r3
 8004f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	eb4b 0303 	adc.w	r3, fp, r3
 8004f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	18db      	adds	r3, r3, r3
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f92:	4613      	mov	r3, r2
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fa2:	f7fb fe4b 	bl	8000c3c <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b3b      	ldr	r3, [pc, #236]	@ (800509c <UART_SetConfig+0x2d4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	@ 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fc2:	4b36      	ldr	r3, [pc, #216]	@ (800509c <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fd0:	441c      	add	r4, r3
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fec:	415b      	adcs	r3, r3
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005028:	464b      	mov	r3, r9
 800502a:	460a      	mov	r2, r1
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800505a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800505e:	f7fb fded 	bl	8000c3c <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <UART_SetConfig+0x2d4>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	@ 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	@ 0x32
 800507a:	4a08      	ldr	r2, [pc, #32]	@ (800509c <UART_SetConfig+0x2d4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4422      	add	r2, r4
 800508e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005090:	e106      	b.n	80052a0 <UART_SetConfig+0x4d8>
 8005092:	bf00      	nop
 8005094:	40011000 	.word	0x40011000
 8005098:	40011400 	.word	0x40011400
 800509c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050b2:	4642      	mov	r2, r8
 80050b4:	464b      	mov	r3, r9
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	6239      	str	r1, [r7, #32]
 80050ba:	415b      	adcs	r3, r3
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050c2:	4641      	mov	r1, r8
 80050c4:	1854      	adds	r4, r2, r1
 80050c6:	4649      	mov	r1, r9
 80050c8:	eb43 0501 	adc.w	r5, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	00eb      	lsls	r3, r5, #3
 80050d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050da:	00e2      	lsls	r2, r4, #3
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050e8:	464b      	mov	r3, r9
 80050ea:	eb45 0303 	adc.w	r3, r5, r3
 80050ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800510e:	4629      	mov	r1, r5
 8005110:	008b      	lsls	r3, r1, #2
 8005112:	4621      	mov	r1, r4
 8005114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005118:	4621      	mov	r1, r4
 800511a:	008a      	lsls	r2, r1, #2
 800511c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005120:	f7fb fd8c 	bl	8000c3c <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b60      	ldr	r3, [pc, #384]	@ (80052ac <UART_SetConfig+0x4e4>)
 800512a:	fba3 2302 	umull	r2, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	011c      	lsls	r4, r3, #4
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800513c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	61b9      	str	r1, [r7, #24]
 800514c:	415b      	adcs	r3, r3
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6139      	str	r1, [r7, #16]
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800519e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051ac:	4649      	mov	r1, r9
 80051ae:	008b      	lsls	r3, r1, #2
 80051b0:	4641      	mov	r1, r8
 80051b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b6:	4641      	mov	r1, r8
 80051b8:	008a      	lsls	r2, r1, #2
 80051ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051be:	f7fb fd3d 	bl	8000c3c <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	4b38      	ldr	r3, [pc, #224]	@ (80052ac <UART_SetConfig+0x4e4>)
 80051ca:	fba3 2301 	umull	r2, r3, r3, r1
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	@ 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	3332      	adds	r3, #50	@ 0x32
 80051dc:	4a33      	ldr	r2, [pc, #204]	@ (80052ac <UART_SetConfig+0x4e4>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e8:	441c      	add	r4, r3
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80051f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80051f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	415b      	adcs	r3, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800523a:	464b      	mov	r3, r9
 800523c:	460a      	mov	r2, r1
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	663b      	str	r3, [r7, #96]	@ 0x60
 800524e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800525c:	4649      	mov	r1, r9
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005266:	4641      	mov	r1, r8
 8005268:	008a      	lsls	r2, r1, #2
 800526a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800526e:	f7fb fce5 	bl	8000c3c <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <UART_SetConfig+0x4e4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	@ 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	@ 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <UART_SetConfig+0x4e4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052a6:	46bd      	mov	sp, r7
 80052a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <__NVIC_SetPriority>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0a      	blt.n	80052da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	490c      	ldr	r1, [pc, #48]	@ (80052fc <__NVIC_SetPriority+0x4c>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052d8:	e00a      	b.n	80052f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4908      	ldr	r1, [pc, #32]	@ (8005300 <__NVIC_SetPriority+0x50>)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	3b04      	subs	r3, #4
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	761a      	strb	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000e100 	.word	0xe000e100
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <SysTick_Handler+0x1c>)
 800530a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800530c:	f001 fe62 	bl	8006fd4 <xTaskGetSchedulerState>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005316:	f002 fe5f 	bl	8007fd8 <xPortSysTickHandler>
  }
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	e000e010 	.word	0xe000e010

08005324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005328:	2100      	movs	r1, #0
 800532a:	f06f 0004 	mvn.w	r0, #4
 800532e:	f7ff ffbf 	bl	80052b0 <__NVIC_SetPriority>
#endif
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	603b      	str	r3, [r7, #0]
  return(result);
 8005344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800534a:	f06f 0305 	mvn.w	r3, #5
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e00c      	b.n	800536c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <osKernelInitialize+0x44>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800535a:	4b08      	ldr	r3, [pc, #32]	@ (800537c <osKernelInitialize+0x44>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005360:	2300      	movs	r3, #0
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	e002      	b.n	800536c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800536c:	687b      	ldr	r3, [r7, #4]
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	2000017c 	.word	0x2000017c

08005380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005386:	f3ef 8305 	mrs	r3, IPSR
 800538a:	603b      	str	r3, [r7, #0]
  return(result);
 800538c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005392:	f06f 0305 	mvn.w	r3, #5
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	e010      	b.n	80053bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <osKernelStart+0x48>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d109      	bne.n	80053b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053a2:	f7ff ffbf 	bl	8005324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053a6:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <osKernelStart+0x48>)
 80053a8:	2202      	movs	r2, #2
 80053aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053ac:	f001 f99e 	bl	80066ec <vTaskStartScheduler>
      stat = osOK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e002      	b.n	80053bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053bc:	687b      	ldr	r3, [r7, #4]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	2000017c 	.word	0x2000017c

080053cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	@ 0x38
 80053d0:	af04      	add	r7, sp, #16
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053dc:	f3ef 8305 	mrs	r3, IPSR
 80053e0:	617b      	str	r3, [r7, #20]
  return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d17e      	bne.n	80054e6 <osThreadNew+0x11a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d07b      	beq.n	80054e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053f2:	2318      	movs	r3, #24
 80053f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d045      	beq.n	8005492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <osThreadNew+0x48>
        name = attr->name;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <osThreadNew+0x6e>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b38      	cmp	r3, #56	@ 0x38
 800542c:	d805      	bhi.n	800543a <osThreadNew+0x6e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <osThreadNew+0x72>
        return (NULL);
 800543a:	2300      	movs	r3, #0
 800543c:	e054      	b.n	80054e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <osThreadNew+0xa8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2ba7      	cmp	r3, #167	@ 0xa7
 800545c:	d90a      	bls.n	8005474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <osThreadNew+0xa8>
        mem = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e010      	b.n	8005496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <osThreadNew+0xca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <osThreadNew+0xca>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <osThreadNew+0xca>
          mem = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e001      	b.n	8005496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d110      	bne.n	80054be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054a4:	9202      	str	r2, [sp, #8]
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 ff26 	bl	8006304 <xTaskCreateStatic>
 80054b8:	4603      	mov	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	e013      	b.n	80054e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 ff74 	bl	80063c4 <xTaskCreate>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <osThreadNew+0x11a>
            hTask = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054e6:	693b      	ldr	r3, [r7, #16]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	@ 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <osThreadFlagsSet+0x1a>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	da03      	bge.n	8005512 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800550a:	f06f 0303 	mvn.w	r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e035      	b.n	800557e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005518:	f3ef 8305 	mrs	r3, IPSR
 800551c:	613b      	str	r3, [r7, #16]
  return(result);
 800551e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01f      	beq.n	8005564 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	2201      	movs	r2, #1
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6978      	ldr	r0, [r7, #20]
 8005536:	f001 fefd 	bl	8007334 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800553a:	f107 030c 	add.w	r3, r7, #12
 800553e:	2200      	movs	r2, #0
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	2100      	movs	r1, #0
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f001 fef4 	bl	8007334 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d015      	beq.n	800557e <osThreadFlagsSet+0x8e>
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <osThreadFlagsSet+0x98>)
 8005554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	e00c      	b.n	800557e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005564:	2300      	movs	r3, #0
 8005566:	2201      	movs	r2, #1
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f001 fe20 	bl	80071b0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005570:	f107 030c 	add.w	r3, r7, #12
 8005574:	2200      	movs	r2, #0
 8005576:	2100      	movs	r1, #0
 8005578:	6978      	ldr	r0, [r7, #20]
 800557a:	f001 fe19 	bl	80071b0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005594:	f3ef 8305 	mrs	r3, IPSR
 8005598:	60fb      	str	r3, [r7, #12]
  return(result);
 800559a:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 80055a0:	f06f 0305 	mvn.w	r3, #5
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e02a      	b.n	80055fe <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	da03      	bge.n	80055b6 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80055ae:	f06f 0303 	mvn.w	r3, #3
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e023      	b.n	80055fe <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80055b6:	f001 fcfd 	bl	8006fb4 <xTaskGetCurrentTaskHandle>
 80055ba:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	2200      	movs	r2, #0
 80055c2:	2100      	movs	r1, #0
 80055c4:	6938      	ldr	r0, [r7, #16]
 80055c6:	f001 fdf3 	bl	80071b0 <xTaskGenericNotify>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d113      	bne.n	80055f8 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	2300      	movs	r3, #0
 80055e2:	2203      	movs	r2, #3
 80055e4:	6938      	ldr	r0, [r7, #16]
 80055e6:	f001 fde3 	bl	80071b0 <xTaskGenericNotify>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d006      	beq.n	80055fe <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e002      	b.n	80055fe <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	@ 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005614:	f3ef 8305 	mrs	r3, IPSR
 8005618:	617b      	str	r3, [r7, #20]
  return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005620:	f06f 0305 	mvn.w	r3, #5
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	e06b      	b.n	8005700 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da03      	bge.n	8005636 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800562e:	f06f 0303 	mvn.w	r3, #3
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005634:	e064      	b.n	8005700 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005644:	e001      	b.n	800564a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005652:	f001 f967 	bl	8006924 <xTaskGetTickCount>
 8005656:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005658:	f107 0210 	add.w	r2, r7, #16
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005660:	2000      	movs	r0, #0
 8005662:	f001 fd45 	bl	80070f0 <xTaskNotifyWait>
 8005666:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d137      	bne.n	80056de <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4013      	ands	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567a:	4313      	orrs	r3, r2
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	4013      	ands	r3, r2
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d032      	beq.n	80056fa <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800569a:	f06f 0302 	mvn.w	r3, #2
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80056a0:	e02e      	b.n	8005700 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d128      	bne.n	80056fe <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80056b2:	f06f 0302 	mvn.w	r3, #2
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80056b8:	e022      	b.n	8005700 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80056ba:	f001 f933 	bl	8006924 <xTaskGetTickCount>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d902      	bls.n	80056d4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d2:	e00e      	b.n	80056f2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80056d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
 80056dc:	e009      	b.n	80056f2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80056e4:	f06f 0302 	mvn.w	r3, #2
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ea:	e002      	b.n	80056f2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80056ec:	f06f 0301 	mvn.w	r3, #1
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1af      	bne.n	8005658 <osThreadFlagsWait+0x50>
 80056f8:	e002      	b.n	8005700 <osThreadFlagsWait+0xf8>
            break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <osThreadFlagsWait+0xf8>
            break;
 80056fe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005702:	4618      	mov	r0, r3
 8005704:	3730      	adds	r7, #48	@ 0x30
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005712:	f3ef 8305 	mrs	r3, IPSR
 8005716:	60bb      	str	r3, [r7, #8]
  return(result);
 8005718:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <osDelay+0x1c>
    stat = osErrorISR;
 800571e:	f06f 0305 	mvn.w	r3, #5
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e007      	b.n	8005736 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 ffa5 	bl	8006680 <vTaskDelay>
    }
  }

  return (stat);
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4a07      	ldr	r2, [pc, #28]	@ (800576c <vApplicationGetIdleTaskMemory+0x2c>)
 8005750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a06      	ldr	r2, [pc, #24]	@ (8005770 <vApplicationGetIdleTaskMemory+0x30>)
 8005756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2280      	movs	r2, #128	@ 0x80
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000180 	.word	0x20000180
 8005770:	20000228 	.word	0x20000228

08005774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a07      	ldr	r2, [pc, #28]	@ (80057a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4a06      	ldr	r2, [pc, #24]	@ (80057a4 <vApplicationGetTimerTaskMemory+0x30>)
 800578a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000428 	.word	0x20000428
 80057a4:	200004d0 	.word	0x200004d0

080057a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0208 	add.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d103      	bne.n	800586a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e00c      	b.n	8005884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3308      	adds	r3, #8
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e002      	b.n	8005878 <vListInsert+0x2e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d2f6      	bcs.n	8005872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6892      	ldr	r2, [r2, #8]
 80058d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6852      	ldr	r2, [r2, #4]
 80058dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d103      	bne.n	80058f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	1e5a      	subs	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800593c:	f002 fabc 	bl	8007eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	68f9      	ldr	r1, [r7, #12]
 800594a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	3b01      	subs	r3, #1
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	441a      	add	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	22ff      	movs	r2, #255	@ 0xff
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d114      	bne.n	80059bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01a      	beq.n	80059d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3310      	adds	r3, #16
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f942 	bl	8006c28 <xTaskRemoveFromEventList>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <xQueueGenericReset+0xd0>)
 80059ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	e009      	b.n	80059d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3310      	adds	r3, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fef1 	bl	80057a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3324      	adds	r3, #36	@ 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff feec 	bl	80057a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059d0:	f002 faa4 	bl	8007f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059d4:	2301      	movs	r3, #1
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	@ 0x38
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	e7fd      	b.n	8005a0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <xQueueGenericCreateStatic+0x56>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <xQueueGenericCreateStatic+0x5a>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueGenericCreateStatic+0x5c>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	623b      	str	r3, [r7, #32]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <xQueueGenericCreateStatic+0x84>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <xQueueGenericCreateStatic+0x88>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <xQueueGenericCreateStatic+0x8a>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	61fb      	str	r3, [r7, #28]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a8a:	2350      	movs	r3, #80	@ 0x50
 8005a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b50      	cmp	r3, #80	@ 0x50
 8005a92:	d00b      	beq.n	8005aac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61bb      	str	r3, [r7, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005aac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00d      	beq.n	8005ad4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ac0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f805 	bl	8005ade <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	@ 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	69b8      	ldr	r0, [r7, #24]
 8005b10:	f7ff fefe 	bl	8005910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	@ 0x38
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b32:	2300      	movs	r3, #0
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <xQueueGenericSend+0x34>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	e7fd      	b.n	8005b54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <xQueueGenericSend+0x42>
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <xQueueGenericSend+0x46>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueGenericSend+0x48>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <xQueueGenericSend+0x64>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSend+0x72>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <xQueueGenericSend+0x76>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericSend+0x78>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <xQueueGenericSend+0x94>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	623b      	str	r3, [r7, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb8:	f001 fa0c 	bl	8006fd4 <xTaskGetSchedulerState>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <xQueueGenericSend+0xa4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueGenericSend+0xa8>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <xQueueGenericSend+0xaa>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <xQueueGenericSend+0xc6>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61fb      	str	r3, [r7, #28]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bea:	f002 f965 	bl	8007eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <xQueueGenericSend+0xdc>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d129      	bne.n	8005c54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c06:	f000 fa0f 	bl	8006028 <prvCopyDataToQueue>
 8005c0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	3324      	adds	r3, #36	@ 0x24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 f805 	bl	8006c28 <xTaskRemoveFromEventList>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c24:	4b3f      	ldr	r3, [pc, #252]	@ (8005d24 <xQueueGenericSend+0x200>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	e00a      	b.n	8005c4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c3c:	4b39      	ldr	r3, [pc, #228]	@ (8005d24 <xQueueGenericSend+0x200>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c4c:	f002 f966 	bl	8007f1c <vPortExitCritical>
				return pdPASS;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e063      	b.n	8005d1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c5a:	f002 f95f 	bl	8007f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e05c      	b.n	8005d1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f83f 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c72:	2301      	movs	r3, #1
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c76:	f002 f951 	bl	8007f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c7a:	f000 fda7 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c7e:	f002 f91b 	bl	8007eb8 <vPortEnterCritical>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d103      	bne.n	8005c98 <xQueueGenericSend+0x174>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x18a>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cae:	f002 f935 	bl	8007f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cb2:	1d3a      	adds	r2, r7, #4
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f82e 	bl	8006d1c <xTaskCheckForTimeOut>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d124      	bne.n	8005d10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cc8:	f000 faa6 	bl	8006218 <prvIsQueueFull>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d018      	beq.n	8005d04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 ff52 	bl	8006b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ce2:	f000 fa31 	bl	8006148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ce6:	f000 fd7f 	bl	80067e8 <xTaskResumeAll>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f47f af7c 	bne.w	8005bea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <xQueueGenericSend+0x200>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	e772      	b.n	8005bea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d06:	f000 fa1f 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d0a:	f000 fd6d 	bl	80067e8 <xTaskResumeAll>
 8005d0e:	e76c      	b.n	8005bea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d12:	f000 fa19 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d16:	f000 fd67 	bl	80067e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3738      	adds	r7, #56	@ 0x38
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b090      	sub	sp, #64	@ 0x40
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <xQueueGenericSendFromISR+0x3e>
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueGenericSendFromISR+0x42>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericSendFromISR+0x44>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSendFromISR+0x6e>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <xQueueGenericSendFromISR+0x72>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <xQueueGenericSendFromISR+0x74>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	623b      	str	r3, [r7, #32]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db8:	f002 f95e 	bl	8008078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	61fa      	str	r2, [r7, #28]
 8005dd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <xQueueGenericSendFromISR+0xc2>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d12f      	bne.n	8005e4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e00:	f000 f912 	bl	8006028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d112      	bne.n	8005e34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	3324      	adds	r3, #36	@ 0x24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff04 	bl	8006c28 <xTaskRemoveFromEventList>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e007      	b.n	8005e44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	b25a      	sxtb	r2, r3
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e44:	2301      	movs	r3, #1
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e48:	e001      	b.n	8005e4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3740      	adds	r7, #64	@ 0x40
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <xQueueReceive+0x32>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	623b      	str	r3, [r7, #32]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <xQueueReceive+0x40>
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <xQueueReceive+0x44>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <xQueueReceive+0x46>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <xQueueReceive+0x62>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	61fb      	str	r3, [r7, #28]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ec6:	f001 f885 	bl	8006fd4 <xTaskGetSchedulerState>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <xQueueReceive+0x72>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <xQueueReceive+0x76>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <xQueueReceive+0x78>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <xQueueReceive+0x94>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	61bb      	str	r3, [r7, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ef8:	f001 ffde 	bl	8007eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01f      	beq.n	8005f48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f0c:	f000 f8f6 	bl	80060fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	1e5a      	subs	r2, r3, #1
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00f      	beq.n	8005f40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	3310      	adds	r3, #16
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fe7f 	bl	8006c28 <xTaskRemoveFromEventList>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f30:	4b3c      	ldr	r3, [pc, #240]	@ (8006024 <xQueueReceive+0x1c0>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f40:	f001 ffec 	bl	8007f1c <vPortExitCritical>
				return pdPASS;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e069      	b.n	800601c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f4e:	f001 ffe5 	bl	8007f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e062      	b.n	800601c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f5c:	f107 0310 	add.w	r3, r7, #16
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fec5 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f66:	2301      	movs	r3, #1
 8005f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f6a:	f001 ffd7 	bl	8007f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f6e:	f000 fc2d 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f72:	f001 ffa1 	bl	8007eb8 <vPortEnterCritical>
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d103      	bne.n	8005f8c <xQueueReceive+0x128>
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f92:	b25b      	sxtb	r3, r3
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d103      	bne.n	8005fa2 <xQueueReceive+0x13e>
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fa2:	f001 ffbb 	bl	8007f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fa6:	1d3a      	adds	r2, r7, #4
 8005fa8:	f107 0310 	add.w	r3, r7, #16
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 feb4 	bl	8006d1c <xTaskCheckForTimeOut>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d123      	bne.n	8006002 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fbc:	f000 f916 	bl	80061ec <prvIsQueueEmpty>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d017      	beq.n	8005ff6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	3324      	adds	r3, #36	@ 0x24
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fdd8 	bl	8006b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd6:	f000 f8b7 	bl	8006148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fda:	f000 fc05 	bl	80067e8 <xTaskResumeAll>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d189      	bne.n	8005ef8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <xQueueReceive+0x1c0>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	e780      	b.n	8005ef8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ff8:	f000 f8a6 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ffc:	f000 fbf4 	bl	80067e8 <xTaskResumeAll>
 8006000:	e77a      	b.n	8005ef8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006004:	f000 f8a0 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006008:	f000 fbee 	bl	80067e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800600c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600e:	f000 f8ed 	bl	80061ec <prvIsQueueEmpty>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	f43f af6f 	beq.w	8005ef8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800601a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800601c:	4618      	mov	r0, r3
 800601e:	3730      	adds	r7, #48	@ 0x30
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d14d      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 ffdc 	bl	8007010 <xTaskPriorityDisinherit>
 8006058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	e043      	b.n	80060ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d119      	bne.n	800609c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6858      	ldr	r0, [r3, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	461a      	mov	r2, r3
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	f002 fecd 	bl	8008e12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	d32b      	bcc.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e026      	b.n	80060ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68d8      	ldr	r0, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	f002 feb3 	bl	8008e12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	425b      	negs	r3, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d207      	bcs.n	80060d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	425b      	negs	r3, r3
 80060d2:	441a      	add	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d105      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060f2:	697b      	ldr	r3, [r7, #20]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d303      	bcc.n	8006130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68d9      	ldr	r1, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	461a      	mov	r2, r3
 800613a:	6838      	ldr	r0, [r7, #0]
 800613c:	f002 fe69 	bl	8008e12 <memcpy>
	}
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006150:	f001 feb2 	bl	8007eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800615a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800615c:	e011      	b.n	8006182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	@ 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd5c 	bl	8006c28 <xTaskRemoveFromEventList>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006176:	f000 fe35 	bl	8006de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dce9      	bgt.n	800615e <prvUnlockQueue+0x16>
 800618a:	e000      	b.n	800618e <prvUnlockQueue+0x46>
					break;
 800618c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	22ff      	movs	r2, #255	@ 0xff
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006196:	f001 fec1 	bl	8007f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800619a:	f001 fe8d 	bl	8007eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a6:	e011      	b.n	80061cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d012      	beq.n	80061d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3310      	adds	r3, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd37 	bl	8006c28 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c0:	f000 fe10 	bl	8006de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dce9      	bgt.n	80061a8 <prvUnlockQueue+0x60>
 80061d4:	e000      	b.n	80061d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	22ff      	movs	r2, #255	@ 0xff
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061e0:	f001 fe9c 	bl	8007f1c <vPortExitCritical>
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f4:	f001 fe60 	bl	8007eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620a:	f001 fe87 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006220:	f001 fe4a 	bl	8007eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	429a      	cmp	r2, r3
 800622e:	d102      	bne.n	8006236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e001      	b.n	800623a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800623a:	f001 fe6f 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e014      	b.n	8006282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006258:	4a0f      	ldr	r2, [pc, #60]	@ (8006298 <vQueueAddToRegistry+0x50>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006264:	490c      	ldr	r1, [pc, #48]	@ (8006298 <vQueueAddToRegistry+0x50>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800626e:	4a0a      	ldr	r2, [pc, #40]	@ (8006298 <vQueueAddToRegistry+0x50>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800627a:	e006      	b.n	800628a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b07      	cmp	r3, #7
 8006286:	d9e7      	bls.n	8006258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	200008d0 	.word	0x200008d0

0800629c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062ac:	f001 fe04 	bl	8007eb8 <vPortEnterCritical>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d103      	bne.n	80062c6 <vQueueWaitForMessageRestricted+0x2a>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d103      	bne.n	80062dc <vQueueWaitForMessageRestricted+0x40>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062dc:	f001 fe1e 	bl	8007f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3324      	adds	r3, #36	@ 0x24
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fc6d 	bl	8006bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff ff26 	bl	8006148 <prvUnlockQueue>
	}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	@ 0x38
 8006308:	af04      	add	r7, sp, #16
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	61fb      	str	r3, [r7, #28]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800634e:	23a8      	movs	r3, #168	@ 0xa8
 8006350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2ba8      	cmp	r3, #168	@ 0xa8
 8006356:	d00b      	beq.n	8006370 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	61bb      	str	r3, [r7, #24]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006370:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01e      	beq.n	80063b6 <xTaskCreateStatic+0xb2>
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01b      	beq.n	80063b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	2202      	movs	r2, #2
 800638c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006390:	2300      	movs	r3, #0
 8006392:	9303      	str	r3, [sp, #12]
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	9302      	str	r3, [sp, #8]
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f851 	bl	8006450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063b0:	f000 f8f6 	bl	80065a0 <prvAddNewTaskToReadyList>
 80063b4:	e001      	b.n	80063ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063ba:	697b      	ldr	r3, [r7, #20]
	}
 80063bc:	4618      	mov	r0, r3
 80063be:	3728      	adds	r7, #40	@ 0x28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af04      	add	r7, sp, #16
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fe8f 	bl	80080fc <pvPortMalloc>
 80063de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063e6:	20a8      	movs	r0, #168	@ 0xa8
 80063e8:	f001 fe88 	bl	80080fc <pvPortMalloc>
 80063ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80063fa:	e005      	b.n	8006408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f001 ff4b 	bl	8008298 <vPortFree>
 8006402:	e001      	b.n	8006408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	2300      	movs	r3, #0
 800641a:	9303      	str	r3, [sp, #12]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	9302      	str	r3, [sp, #8]
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f80f 	bl	8006450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006432:	69f8      	ldr	r0, [r7, #28]
 8006434:	f000 f8b4 	bl	80065a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006438:	2301      	movs	r3, #1
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	e002      	b.n	8006444 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800643e:	f04f 33ff 	mov.w	r3, #4294967295
 8006442:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006444:	69bb      	ldr	r3, [r7, #24]
	}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	461a      	mov	r2, r3
 8006468:	21a5      	movs	r1, #165	@ 0xa5
 800646a:	f002 fc00 	bl	8008c6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006478:	3b01      	subs	r3, #1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01f      	beq.n	80064f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e012      	b.n	80064dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	7819      	ldrb	r1, [r3, #0]
 80064be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	3334      	adds	r3, #52	@ 0x34
 80064c6:	460a      	mov	r2, r1
 80064c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3301      	adds	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	d9e9      	bls.n	80064b6 <prvInitialiseNewTask+0x66>
 80064e2:	e000      	b.n	80064e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80064e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064ee:	e003      	b.n	80064f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	2b37      	cmp	r3, #55	@ 0x37
 80064fc:	d901      	bls.n	8006502 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fe:	2337      	movs	r3, #55	@ 0x37
 8006500:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff f965 	bl	80057e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	3318      	adds	r3, #24
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff f960 	bl	80057e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800652c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	2200      	movs	r2, #0
 800654a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	3354      	adds	r3, #84	@ 0x54
 8006552:	224c      	movs	r2, #76	@ 0x4c
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f002 fb89 	bl	8008c6e <memset>
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	4a0d      	ldr	r2, [pc, #52]	@ (8006594 <prvInitialiseNewTask+0x144>)
 8006560:	659a      	str	r2, [r3, #88]	@ 0x58
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <prvInitialiseNewTask+0x148>)
 8006566:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	4a0c      	ldr	r2, [pc, #48]	@ (800659c <prvInitialiseNewTask+0x14c>)
 800656c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	69b8      	ldr	r0, [r7, #24]
 8006574:	f001 fb72 	bl	8007c5c <pxPortInitialiseStack>
 8006578:	4602      	mov	r2, r0
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006588:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658a:	bf00      	nop
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20004b68 	.word	0x20004b68
 8006598:	20004bd0 	.word	0x20004bd0
 800659c:	20004c38 	.word	0x20004c38

080065a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065a8:	f001 fc86 	bl	8007eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006664 <prvAddNewTaskToReadyList+0xc4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006664 <prvAddNewTaskToReadyList+0xc4>)
 80065b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006668 <prvAddNewTaskToReadyList+0xc8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065be:	4a2a      	ldr	r2, [pc, #168]	@ (8006668 <prvAddNewTaskToReadyList+0xc8>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c4:	4b27      	ldr	r3, [pc, #156]	@ (8006664 <prvAddNewTaskToReadyList+0xc4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d110      	bne.n	80065ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065cc:	f000 fc2e 	bl	8006e2c <prvInitialiseTaskLists>
 80065d0:	e00d      	b.n	80065ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065d2:	4b26      	ldr	r3, [pc, #152]	@ (800666c <prvAddNewTaskToReadyList+0xcc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065da:	4b23      	ldr	r3, [pc, #140]	@ (8006668 <prvAddNewTaskToReadyList+0xc8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d802      	bhi.n	80065ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006668 <prvAddNewTaskToReadyList+0xc8>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ee:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <prvAddNewTaskToReadyList+0xd0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006670 <prvAddNewTaskToReadyList+0xd0>)
 80065f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <prvAddNewTaskToReadyList+0xd0>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006604:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <prvAddNewTaskToReadyList+0xd4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <prvAddNewTaskToReadyList+0x74>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <prvAddNewTaskToReadyList+0xd4>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <prvAddNewTaskToReadyList+0xd8>)
 8006622:	441a      	add	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7ff f8e9 	bl	8005802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006630:	f001 fc74 	bl	8007f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006634:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <prvAddNewTaskToReadyList+0xcc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <prvAddNewTaskToReadyList+0xc8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	429a      	cmp	r2, r3
 8006648:	d207      	bcs.n	800665a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800664a:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <prvAddNewTaskToReadyList+0xdc>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000de4 	.word	0x20000de4
 8006668:	20000910 	.word	0x20000910
 800666c:	20000df0 	.word	0x20000df0
 8006670:	20000e00 	.word	0x20000e00
 8006674:	20000dec 	.word	0x20000dec
 8006678:	20000914 	.word	0x20000914
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006692:	4b14      	ldr	r3, [pc, #80]	@ (80066e4 <vTaskDelay+0x64>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <vTaskDelay+0x32>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	60bb      	str	r3, [r7, #8]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066b2:	f000 f88b 	bl	80067cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff21 	bl	8007500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066be:	f000 f893 	bl	80067e8 <xTaskResumeAll>
 80066c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d107      	bne.n	80066da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066ca:	4b07      	ldr	r3, [pc, #28]	@ (80066e8 <vTaskDelay+0x68>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000e0c 	.word	0x20000e0c
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066fa:	463a      	mov	r2, r7
 80066fc:	1d39      	adds	r1, r7, #4
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff f81c 	bl	8005740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	9202      	str	r2, [sp, #8]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	460a      	mov	r2, r1
 800671a:	4924      	ldr	r1, [pc, #144]	@ (80067ac <vTaskStartScheduler+0xc0>)
 800671c:	4824      	ldr	r0, [pc, #144]	@ (80067b0 <vTaskStartScheduler+0xc4>)
 800671e:	f7ff fdf1 	bl	8006304 <xTaskCreateStatic>
 8006722:	4603      	mov	r3, r0
 8006724:	4a23      	ldr	r2, [pc, #140]	@ (80067b4 <vTaskStartScheduler+0xc8>)
 8006726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006728:	4b22      	ldr	r3, [pc, #136]	@ (80067b4 <vTaskStartScheduler+0xc8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e001      	b.n	800673a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d102      	bne.n	8006746 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006740:	f000 ff32 	bl	80075a8 <xTimerCreateTimerTask>
 8006744:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d11b      	bne.n	8006784 <vTaskStartScheduler+0x98>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	613b      	str	r3, [r7, #16]
}
 800675e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006760:	4b15      	ldr	r3, [pc, #84]	@ (80067b8 <vTaskStartScheduler+0xcc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3354      	adds	r3, #84	@ 0x54
 8006766:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <vTaskStartScheduler+0xd0>)
 8006768:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800676a:	4b15      	ldr	r3, [pc, #84]	@ (80067c0 <vTaskStartScheduler+0xd4>)
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006772:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <vTaskStartScheduler+0xd8>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006778:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <vTaskStartScheduler+0xdc>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800677e:	f001 faf7 	bl	8007d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006782:	e00f      	b.n	80067a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d10b      	bne.n	80067a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <vTaskStartScheduler+0xb4>
}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	080099e4 	.word	0x080099e4
 80067b0:	08006dfd 	.word	0x08006dfd
 80067b4:	20000e08 	.word	0x20000e08
 80067b8:	20000910 	.word	0x20000910
 80067bc:	2000001c 	.word	0x2000001c
 80067c0:	20000e04 	.word	0x20000e04
 80067c4:	20000df0 	.word	0x20000df0
 80067c8:	20000de8 	.word	0x20000de8

080067cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067d0:	4b04      	ldr	r3, [pc, #16]	@ (80067e4 <vTaskSuspendAll+0x18>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a03      	ldr	r2, [pc, #12]	@ (80067e4 <vTaskSuspendAll+0x18>)
 80067d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000e0c 	.word	0x20000e0c

080067e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067f6:	4b42      	ldr	r3, [pc, #264]	@ (8006900 <xTaskResumeAll+0x118>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <xTaskResumeAll+0x2e>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	603b      	str	r3, [r7, #0]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006816:	f001 fb4f 	bl	8007eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800681a:	4b39      	ldr	r3, [pc, #228]	@ (8006900 <xTaskResumeAll+0x118>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3b01      	subs	r3, #1
 8006820:	4a37      	ldr	r2, [pc, #220]	@ (8006900 <xTaskResumeAll+0x118>)
 8006822:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006824:	4b36      	ldr	r3, [pc, #216]	@ (8006900 <xTaskResumeAll+0x118>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d162      	bne.n	80068f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800682c:	4b35      	ldr	r3, [pc, #212]	@ (8006904 <xTaskResumeAll+0x11c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05e      	beq.n	80068f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006834:	e02f      	b.n	8006896 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b34      	ldr	r3, [pc, #208]	@ (8006908 <xTaskResumeAll+0x120>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3318      	adds	r3, #24
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff f83a 	bl	80058bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff f835 	bl	80058bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006856:	4b2d      	ldr	r3, [pc, #180]	@ (800690c <xTaskResumeAll+0x124>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d903      	bls.n	8006866 <xTaskResumeAll+0x7e>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4a2a      	ldr	r2, [pc, #168]	@ (800690c <xTaskResumeAll+0x124>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4a27      	ldr	r2, [pc, #156]	@ (8006910 <xTaskResumeAll+0x128>)
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fe ffc0 	bl	8005802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006886:	4b23      	ldr	r3, [pc, #140]	@ (8006914 <xTaskResumeAll+0x12c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006890:	4b21      	ldr	r3, [pc, #132]	@ (8006918 <xTaskResumeAll+0x130>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006896:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <xTaskResumeAll+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1cb      	bne.n	8006836 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068a4:	f000 fb66 	bl	8006f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068a8:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <xTaskResumeAll+0x134>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068b4:	f000 f846 	bl	8006944 <xTaskIncrementTick>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80068be:	4b16      	ldr	r3, [pc, #88]	@ (8006918 <xTaskResumeAll+0x130>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f1      	bne.n	80068b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80068d0:	4b12      	ldr	r3, [pc, #72]	@ (800691c <xTaskResumeAll+0x134>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068d6:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <xTaskResumeAll+0x130>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <xTaskResumeAll+0x138>)
 80068e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f2:	f001 fb13 	bl	8007f1c <vPortExitCritical>

	return xAlreadyYielded;
 80068f6:	68bb      	ldr	r3, [r7, #8]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000e0c 	.word	0x20000e0c
 8006904:	20000de4 	.word	0x20000de4
 8006908:	20000da4 	.word	0x20000da4
 800690c:	20000dec 	.word	0x20000dec
 8006910:	20000914 	.word	0x20000914
 8006914:	20000910 	.word	0x20000910
 8006918:	20000df8 	.word	0x20000df8
 800691c:	20000df4 	.word	0x20000df4
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800692a:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <xTaskGetTickCount+0x1c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006930:	687b      	ldr	r3, [r7, #4]
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000de8 	.word	0x20000de8

08006944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a8c <xTaskIncrementTick+0x148>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8090 	bne.w	8006a78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006958:	4b4d      	ldr	r3, [pc, #308]	@ (8006a90 <xTaskIncrementTick+0x14c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006960:	4a4b      	ldr	r2, [pc, #300]	@ (8006a90 <xTaskIncrementTick+0x14c>)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d121      	bne.n	80069b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800696c:	4b49      	ldr	r3, [pc, #292]	@ (8006a94 <xTaskIncrementTick+0x150>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	603b      	str	r3, [r7, #0]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xTaskIncrementTick+0x46>
 800698e:	4b41      	ldr	r3, [pc, #260]	@ (8006a94 <xTaskIncrementTick+0x150>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	4b40      	ldr	r3, [pc, #256]	@ (8006a98 <xTaskIncrementTick+0x154>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a3e      	ldr	r2, [pc, #248]	@ (8006a94 <xTaskIncrementTick+0x150>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4a3e      	ldr	r2, [pc, #248]	@ (8006a98 <xTaskIncrementTick+0x154>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <xTaskIncrementTick+0x158>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a3c      	ldr	r2, [pc, #240]	@ (8006a9c <xTaskIncrementTick+0x158>)
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	f000 fae2 	bl	8006f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069b0:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa0 <xTaskIncrementTick+0x15c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d349      	bcc.n	8006a4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b36      	ldr	r3, [pc, #216]	@ (8006a94 <xTaskIncrementTick+0x150>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c4:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <xTaskIncrementTick+0x15c>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
					break;
 80069cc:	e03f      	b.n	8006a4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <xTaskIncrementTick+0x150>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d203      	bcs.n	80069ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069e6:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa0 <xTaskIncrementTick+0x15c>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069ec:	e02f      	b.n	8006a4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe ff62 	bl	80058bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3318      	adds	r3, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe ff59 	bl	80058bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	4b25      	ldr	r3, [pc, #148]	@ (8006aa4 <xTaskIncrementTick+0x160>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d903      	bls.n	8006a1e <xTaskIncrementTick+0xda>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <xTaskIncrementTick+0x160>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <xTaskIncrementTick+0x164>)
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fe fee4 	bl	8005802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006aac <xTaskIncrementTick+0x168>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d3b8      	bcc.n	80069ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4c:	e7b5      	b.n	80069ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a4e:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <xTaskIncrementTick+0x168>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a54:	4914      	ldr	r1, [pc, #80]	@ (8006aa8 <xTaskIncrementTick+0x164>)
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d901      	bls.n	8006a6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a6a:	4b11      	ldr	r3, [pc, #68]	@ (8006ab0 <xTaskIncrementTick+0x16c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e004      	b.n	8006a82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a78:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab4 <xTaskIncrementTick+0x170>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ab4 <xTaskIncrementTick+0x170>)
 8006a80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a82:	697b      	ldr	r3, [r7, #20]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000e0c 	.word	0x20000e0c
 8006a90:	20000de8 	.word	0x20000de8
 8006a94:	20000d9c 	.word	0x20000d9c
 8006a98:	20000da0 	.word	0x20000da0
 8006a9c:	20000dfc 	.word	0x20000dfc
 8006aa0:	20000e04 	.word	0x20000e04
 8006aa4:	20000dec 	.word	0x20000dec
 8006aa8:	20000914 	.word	0x20000914
 8006aac:	20000910 	.word	0x20000910
 8006ab0:	20000df8 	.word	0x20000df8
 8006ab4:	20000df4 	.word	0x20000df4

08006ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006abe:	4b2b      	ldr	r3, [pc, #172]	@ (8006b6c <vTaskSwitchContext+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b70 <vTaskSwitchContext+0xb8>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006acc:	e047      	b.n	8006b5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006ace:	4b28      	ldr	r3, [pc, #160]	@ (8006b70 <vTaskSwitchContext+0xb8>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad4:	4b27      	ldr	r3, [pc, #156]	@ (8006b74 <vTaskSwitchContext+0xbc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e011      	b.n	8006b00 <vTaskSwitchContext+0x48>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <vTaskSwitchContext+0x42>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <vTaskSwitchContext+0x3e>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	491d      	ldr	r1, [pc, #116]	@ (8006b78 <vTaskSwitchContext+0xc0>)
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0e3      	beq.n	8006adc <vTaskSwitchContext+0x24>
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4a16      	ldr	r2, [pc, #88]	@ (8006b78 <vTaskSwitchContext+0xc0>)
 8006b20:	4413      	add	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	3308      	adds	r3, #8
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d104      	bne.n	8006b44 <vTaskSwitchContext+0x8c>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b7c <vTaskSwitchContext+0xc4>)
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4a09      	ldr	r2, [pc, #36]	@ (8006b74 <vTaskSwitchContext+0xbc>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b54:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <vTaskSwitchContext+0xc4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3354      	adds	r3, #84	@ 0x54
 8006b5a:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vTaskSwitchContext+0xc8>)
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000e0c 	.word	0x20000e0c
 8006b70:	20000df8 	.word	0x20000df8
 8006b74:	20000dec 	.word	0x20000dec
 8006b78:	20000914 	.word	0x20000914
 8006b7c:	20000910 	.word	0x20000910
 8006b80:	2000001c 	.word	0x2000001c

08006b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <vTaskPlaceOnEventList+0x48>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3318      	adds	r3, #24
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fe fe48 	bl	800584a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bba:	2101      	movs	r1, #1
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f000 fc9f 	bl	8007500 <prvAddCurrentTaskToDelayedList>
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000910 	.word	0x20000910

08006bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	617b      	str	r3, [r7, #20]
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	e7fd      	b.n	8006bf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3318      	adds	r3, #24
 8006c00:	4619      	mov	r1, r3
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7fe fdfd 	bl	8005802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	68b8      	ldr	r0, [r7, #8]
 8006c18:	f000 fc72 	bl	8007500 <prvAddCurrentTaskToDelayedList>
	}
 8006c1c:	bf00      	nop
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000910 	.word	0x20000910

08006c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3318      	adds	r3, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fe2e 	bl	80058bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <xTaskRemoveFromEventList+0xb0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11d      	bne.n	8006ca4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fe25 	bl	80058bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d903      	bls.n	8006c86 <xTaskRemoveFromEventList+0x5e>
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <xTaskRemoveFromEventList+0xb8>)
 8006c94:	441a      	add	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe fdb0 	bl	8005802 <vListInsertEnd>
 8006ca2:	e005      	b.n	8006cb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	480e      	ldr	r0, [pc, #56]	@ (8006ce4 <xTaskRemoveFromEventList+0xbc>)
 8006cac:	f7fe fda9 	bl	8005802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <xTaskRemoveFromEventList+0xc0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d905      	bls.n	8006cca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <xTaskRemoveFromEventList+0xc4>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e001      	b.n	8006cce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000e0c 	.word	0x20000e0c
 8006cdc:	20000dec 	.word	0x20000dec
 8006ce0:	20000914 	.word	0x20000914
 8006ce4:	20000da4 	.word	0x20000da4
 8006ce8:	20000910 	.word	0x20000910
 8006cec:	20000df8 	.word	0x20000df8

08006cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <vTaskInternalSetTimeOutState+0x24>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <vTaskInternalSetTimeOutState+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	20000dfc 	.word	0x20000dfc
 8006d18:	20000de8 	.word	0x20000de8

08006d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d62:	f001 f8a9 	bl	8007eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <xTaskCheckForTimeOut+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d102      	bne.n	8006d86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e023      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <xTaskCheckForTimeOut+0xc4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d007      	beq.n	8006da2 <xTaskCheckForTimeOut+0x86>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e015      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d20b      	bcs.n	8006dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff99 	bl	8006cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	e004      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dce:	f001 f8a5 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000de8 	.word	0x20000de8
 8006de0:	20000dfc 	.word	0x20000dfc

08006de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <vTaskMissedYield+0x14>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20000df8 	.word	0x20000df8

08006dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e04:	f000 f852 	bl	8006eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <prvIdleTask+0x28>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d9f9      	bls.n	8006e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <prvIdleTask+0x2c>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e20:	e7f0      	b.n	8006e04 <prvIdleTask+0x8>
 8006e22:	bf00      	nop
 8006e24:	20000914 	.word	0x20000914
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	e00c      	b.n	8006e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a12      	ldr	r2, [pc, #72]	@ (8006e8c <prvInitialiseTaskLists+0x60>)
 8006e44:	4413      	add	r3, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fcae 	bl	80057a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b37      	cmp	r3, #55	@ 0x37
 8006e56:	d9ef      	bls.n	8006e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e58:	480d      	ldr	r0, [pc, #52]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e5a:	f7fe fca5 	bl	80057a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e5e:	480d      	ldr	r0, [pc, #52]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e60:	f7fe fca2 	bl	80057a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e64:	480c      	ldr	r0, [pc, #48]	@ (8006e98 <prvInitialiseTaskLists+0x6c>)
 8006e66:	f7fe fc9f 	bl	80057a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e6a:	480c      	ldr	r0, [pc, #48]	@ (8006e9c <prvInitialiseTaskLists+0x70>)
 8006e6c:	f7fe fc9c 	bl	80057a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e70:	480b      	ldr	r0, [pc, #44]	@ (8006ea0 <prvInitialiseTaskLists+0x74>)
 8006e72:	f7fe fc99 	bl	80057a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <prvInitialiseTaskLists+0x78>)
 8006e78:	4a05      	ldr	r2, [pc, #20]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <prvInitialiseTaskLists+0x7c>)
 8006e7e:	4a05      	ldr	r2, [pc, #20]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000914 	.word	0x20000914
 8006e90:	20000d74 	.word	0x20000d74
 8006e94:	20000d88 	.word	0x20000d88
 8006e98:	20000da4 	.word	0x20000da4
 8006e9c:	20000db8 	.word	0x20000db8
 8006ea0:	20000dd0 	.word	0x20000dd0
 8006ea4:	20000d9c 	.word	0x20000d9c
 8006ea8:	20000da0 	.word	0x20000da0

08006eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb2:	e019      	b.n	8006ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb4:	f001 f800 	bl	8007eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <prvCheckTasksWaitingTermination+0x50>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fcf9 	bl	80058bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4a0a      	ldr	r2, [pc, #40]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ede:	f001 f81d 	bl	8007f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f810 	bl	8006f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e1      	bne.n	8006eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000db8 	.word	0x20000db8
 8006f00:	20000de4 	.word	0x20000de4
 8006f04:	20000dcc 	.word	0x20000dcc

08006f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3354      	adds	r3, #84	@ 0x54
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fec3 	bl	8008ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f9b5 	bl	8008298 <vPortFree>
				vPortFree( pxTCB );
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 f9b2 	bl	8008298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f34:	e019      	b.n	8006f6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d103      	bne.n	8006f48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 f9a9 	bl	8008298 <vPortFree>
	}
 8006f46:	e010      	b.n	8006f6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d00b      	beq.n	8006f6a <prvDeleteTCB+0x62>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <prvDeleteTCB+0x5e>
	}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <prvResetNextTaskUnblockTime+0x38>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f84:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f8c:	e008      	b.n	8006fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <prvResetNextTaskUnblockTime+0x38>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4a04      	ldr	r2, [pc, #16]	@ (8006fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000d9c 	.word	0x20000d9c
 8006fb0:	20000e04 	.word	0x20000e04

08006fb4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fba:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fc0:	687b      	ldr	r3, [r7, #4]
	}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000910 	.word	0x20000910

08006fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fda:	4b0b      	ldr	r3, [pc, #44]	@ (8007008 <xTaskGetSchedulerState+0x34>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e008      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b08      	ldr	r3, [pc, #32]	@ (800700c <xTaskGetSchedulerState+0x38>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e001      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ffa:	687b      	ldr	r3, [r7, #4]
	}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	20000df0 	.word	0x20000df0
 800700c:	20000e0c 	.word	0x20000e0c

08007010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d058      	beq.n	80070d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007026:	4b2f      	ldr	r3, [pc, #188]	@ (80070e4 <xTaskPriorityDisinherit+0xd4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	429a      	cmp	r2, r3
 800702e:	d00b      	beq.n	8007048 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60bb      	str	r3, [r7, #8]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	1e5a      	subs	r2, r3, #1
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707a:	429a      	cmp	r2, r3
 800707c:	d02c      	beq.n	80070d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007082:	2b00      	cmp	r3, #0
 8007084:	d128      	bne.n	80070d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3304      	adds	r3, #4
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fc16 	bl	80058bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a8:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <xTaskPriorityDisinherit+0xd8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d903      	bls.n	80070b8 <xTaskPriorityDisinherit+0xa8>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	4a0c      	ldr	r2, [pc, #48]	@ (80070e8 <xTaskPriorityDisinherit+0xd8>)
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <xTaskPriorityDisinherit+0xdc>)
 80070c6:	441a      	add	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe fb97 	bl	8005802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070d4:	2301      	movs	r3, #1
 80070d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d8:	697b      	ldr	r3, [r7, #20]
	}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000910 	.word	0x20000910
 80070e8:	20000dec 	.word	0x20000dec
 80070ec:	20000914 	.word	0x20000914

080070f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80070fe:	f000 fedb 	bl	8007eb8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007102:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d01c      	beq.n	800714a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007110:	4b25      	ldr	r3, [pc, #148]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	43d2      	mvns	r2, r2
 800711c:	400a      	ands	r2, r1
 800711e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007122:	4b21      	ldr	r3, [pc, #132]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007132:	2101      	movs	r1, #1
 8007134:	6838      	ldr	r0, [r7, #0]
 8007136:	f000 f9e3 	bl	8007500 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800713a:	4b1c      	ldr	r3, [pc, #112]	@ (80071ac <xTaskNotifyWait+0xbc>)
 800713c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800714a:	f000 fee7 	bl	8007f1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800714e:	f000 feb3 	bl	8007eb8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007158:	4b13      	ldr	r3, [pc, #76]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007164:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d002      	beq.n	8007178 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e00a      	b.n	800718e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007178:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	43d2      	mvns	r2, r2
 8007184:	400a      	ands	r2, r1
 8007186:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800718a:	2301      	movs	r3, #1
 800718c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <xTaskNotifyWait+0xb8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007198:	f000 fec0 	bl	8007f1c <vPortExitCritical>

		return xReturn;
 800719c:	697b      	ldr	r3, [r7, #20]
	}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000910 	.word	0x20000910
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	@ 0x28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80071c0:	2301      	movs	r3, #1
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <xTaskGenericNotify+0x32>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61bb      	str	r3, [r7, #24]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80071e6:	f000 fe67 	bl	8007eb8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007200:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d82e      	bhi.n	800726e <xTaskGenericNotify+0xbe>
 8007210:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <xTaskGenericNotify+0x68>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007293 	.word	0x08007293
 800721c:	0800722d 	.word	0x0800722d
 8007220:	0800723f 	.word	0x0800723f
 8007224:	0800724f 	.word	0x0800724f
 8007228:	08007259 	.word	0x08007259
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	431a      	orrs	r2, r3
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800723c:	e02c      	b.n	8007298 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800724c:	e024      	b.n	8007298 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007256:	e01f      	b.n	8007298 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007258:	7ffb      	ldrb	r3, [r7, #31]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d004      	beq.n	8007268 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007266:	e017      	b.n	8007298 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007268:	2300      	movs	r3, #0
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800726c:	e014      	b.n	8007298 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d00d      	beq.n	8007296 <xTaskGenericNotify+0xe6>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	617b      	str	r3, [r7, #20]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <xTaskGenericNotify+0xde>
					break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <xTaskGenericNotify+0xe8>

					break;
 8007296:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007298:	7ffb      	ldrb	r3, [r7, #31]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d13b      	bne.n	8007316 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fb0a 	bl	80058bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <xTaskGenericNotify+0x174>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <xTaskGenericNotify+0x10c>
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007324 <xTaskGenericNotify+0x174>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <xTaskGenericNotify+0x178>)
 80072ca:	441a      	add	r2, r3
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe fa95 	bl	8005802 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <xTaskGenericNotify+0x148>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <xTaskGenericNotify+0x17c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d907      	bls.n	8007316 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007306:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <xTaskGenericNotify+0x180>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007316:	f000 fe01 	bl	8007f1c <vPortExitCritical>

		return xReturn;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	@ 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000dec 	.word	0x20000dec
 8007328:	20000914 	.word	0x20000914
 800732c:	20000910 	.word	0x20000910
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	@ 0x38
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007344:	2301      	movs	r3, #1
 8007346:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007366:	f000 fe87 	bl	8008078 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800736e:	f3ef 8211 	mrs	r2, BASEPRI
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	623a      	str	r2, [r7, #32]
 8007384:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007386:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80073a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d82e      	bhi.n	8007410 <xTaskGenericNotifyFromISR+0xdc>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <xTaskGenericNotifyFromISR+0x84>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	08007435 	.word	0x08007435
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073df 	.word	0x080073df
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073f9 	.word	0x080073f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80073dc:	e02d      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80073ec:	e025      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80073f6:	e020      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d004      	beq.n	800740a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007408:	e017      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800740a:	2300      	movs	r3, #0
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800740e:	e014      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d00d      	beq.n	8007438 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	61bb      	str	r3, [r7, #24]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007434:	bf00      	nop
 8007436:	e000      	b.n	800743a <xTaskGenericNotifyFromISR+0x106>
					break;
 8007438:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800743a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800743e:	2b01      	cmp	r3, #1
 8007440:	d147      	bne.n	80074d2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617b      	str	r3, [r7, #20]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007462:	4b21      	ldr	r3, [pc, #132]	@ (80074e8 <xTaskGenericNotifyFromISR+0x1b4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11d      	bne.n	80074a6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	3304      	adds	r3, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fa24 	bl	80058bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007478:	4b1c      	ldr	r3, [pc, #112]	@ (80074ec <xTaskGenericNotifyFromISR+0x1b8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d903      	bls.n	8007488 <xTaskGenericNotifyFromISR+0x154>
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <xTaskGenericNotifyFromISR+0x1b8>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <xTaskGenericNotifyFromISR+0x1bc>)
 8007496:	441a      	add	r2, r3
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fe f9af 	bl	8005802 <vListInsertEnd>
 80074a4:	e005      	b.n	80074b2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	3318      	adds	r3, #24
 80074aa:	4619      	mov	r1, r3
 80074ac:	4811      	ldr	r0, [pc, #68]	@ (80074f4 <xTaskGenericNotifyFromISR+0x1c0>)
 80074ae:	f7fe f9a8 	bl	8005802 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4b10      	ldr	r3, [pc, #64]	@ (80074f8 <xTaskGenericNotifyFromISR+0x1c4>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d908      	bls.n	80074d2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80074c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80074c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <xTaskGenericNotifyFromISR+0x1c8>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f383 8811 	msr	BASEPRI, r3
}
 80074dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3738      	adds	r7, #56	@ 0x38
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000e0c 	.word	0x20000e0c
 80074ec:	20000dec 	.word	0x20000dec
 80074f0:	20000914 	.word	0x20000914
 80074f4:	20000da4 	.word	0x20000da4
 80074f8:	20000910 	.word	0x20000910
 80074fc:	20000df8 	.word	0x20000df8

08007500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800750a:	4b21      	ldr	r3, [pc, #132]	@ (8007590 <prvAddCurrentTaskToDelayedList+0x90>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007510:	4b20      	ldr	r3, [pc, #128]	@ (8007594 <prvAddCurrentTaskToDelayedList+0x94>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe f9d0 	bl	80058bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d10a      	bne.n	800753a <prvAddCurrentTaskToDelayedList+0x3a>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800752a:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <prvAddCurrentTaskToDelayedList+0x94>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3304      	adds	r3, #4
 8007530:	4619      	mov	r1, r3
 8007532:	4819      	ldr	r0, [pc, #100]	@ (8007598 <prvAddCurrentTaskToDelayedList+0x98>)
 8007534:	f7fe f965 	bl	8005802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007538:	e026      	b.n	8007588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007542:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <prvAddCurrentTaskToDelayedList+0x94>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d209      	bcs.n	8007566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007552:	4b12      	ldr	r3, [pc, #72]	@ (800759c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b0f      	ldr	r3, [pc, #60]	@ (8007594 <prvAddCurrentTaskToDelayedList+0x94>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7fe f973 	bl	800584a <vListInsert>
}
 8007564:	e010      	b.n	8007588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007566:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4b0a      	ldr	r3, [pc, #40]	@ (8007594 <prvAddCurrentTaskToDelayedList+0x94>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3304      	adds	r3, #4
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f7fe f969 	bl	800584a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	d202      	bcs.n	8007588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007582:	4a08      	ldr	r2, [pc, #32]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6013      	str	r3, [r2, #0]
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000de8 	.word	0x20000de8
 8007594:	20000910 	.word	0x20000910
 8007598:	20000dd0 	.word	0x20000dd0
 800759c:	20000da0 	.word	0x20000da0
 80075a0:	20000d9c 	.word	0x20000d9c
 80075a4:	20000e04 	.word	0x20000e04

080075a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	@ 0x28
 80075ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075b2:	f000 fb13 	bl	8007bdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075b6:	4b1d      	ldr	r3, [pc, #116]	@ (800762c <xTimerCreateTimerTask+0x84>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075c6:	1d3a      	adds	r2, r7, #4
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe f8cf 	bl	8005774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	9202      	str	r2, [sp, #8]
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	2302      	movs	r3, #2
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	460a      	mov	r2, r1
 80075e8:	4911      	ldr	r1, [pc, #68]	@ (8007630 <xTimerCreateTimerTask+0x88>)
 80075ea:	4812      	ldr	r0, [pc, #72]	@ (8007634 <xTimerCreateTimerTask+0x8c>)
 80075ec:	f7fe fe8a 	bl	8006304 <xTaskCreateStatic>
 80075f0:	4603      	mov	r3, r0
 80075f2:	4a11      	ldr	r2, [pc, #68]	@ (8007638 <xTimerCreateTimerTask+0x90>)
 80075f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80075f6:	4b10      	ldr	r3, [pc, #64]	@ (8007638 <xTimerCreateTimerTask+0x90>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80075fe:	2301      	movs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	613b      	str	r3, [r7, #16]
}
 800761a:	bf00      	nop
 800761c:	bf00      	nop
 800761e:	e7fd      	b.n	800761c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007620:	697b      	ldr	r3, [r7, #20]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000e40 	.word	0x20000e40
 8007630:	080099ec 	.word	0x080099ec
 8007634:	08007775 	.word	0x08007775
 8007638:	20000e44 	.word	0x20000e44

0800763c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	@ 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <xTimerGenericCommand+0x30>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800766c:	4b19      	ldr	r3, [pc, #100]	@ (80076d4 <xTimerGenericCommand+0x98>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02a      	beq.n	80076ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b05      	cmp	r3, #5
 8007684:	dc18      	bgt.n	80076b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007686:	f7ff fca5 	bl	8006fd4 <xTaskGetSchedulerState>
 800768a:	4603      	mov	r3, r0
 800768c:	2b02      	cmp	r3, #2
 800768e:	d109      	bne.n	80076a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007690:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <xTimerGenericCommand+0x98>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	f107 0110 	add.w	r1, r7, #16
 8007698:	2300      	movs	r3, #0
 800769a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769c:	f7fe fa42 	bl	8005b24 <xQueueGenericSend>
 80076a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80076a2:	e012      	b.n	80076ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076a4:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <xTimerGenericCommand+0x98>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	f107 0110 	add.w	r1, r7, #16
 80076ac:	2300      	movs	r3, #0
 80076ae:	2200      	movs	r2, #0
 80076b0:	f7fe fa38 	bl	8005b24 <xQueueGenericSend>
 80076b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80076b6:	e008      	b.n	80076ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076b8:	4b06      	ldr	r3, [pc, #24]	@ (80076d4 <xTimerGenericCommand+0x98>)
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	f107 0110 	add.w	r1, r7, #16
 80076c0:	2300      	movs	r3, #0
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	f7fe fb30 	bl	8005d28 <xQueueGenericSendFromISR>
 80076c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3728      	adds	r7, #40	@ 0x28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000e40 	.word	0x20000e40

080076d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e2:	4b23      	ldr	r3, [pc, #140]	@ (8007770 <prvProcessExpiredTimer+0x98>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe f8e3 	bl	80058bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d023      	beq.n	800774c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	699a      	ldr	r2, [r3, #24]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	18d1      	adds	r1, r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	6978      	ldr	r0, [r7, #20]
 8007712:	f000 f8d5 	bl	80078c0 <prvInsertTimerInActiveList>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d020      	beq.n	800775e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	2100      	movs	r1, #0
 8007726:	6978      	ldr	r0, [r7, #20]
 8007728:	f7ff ff88 	bl	800763c <xTimerGenericCommand>
 800772c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d114      	bne.n	800775e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	4798      	blx	r3
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000e38 	.word	0x20000e38

08007774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f859 	bl	8007838 <prvGetNextExpireTime>
 8007786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4619      	mov	r1, r3
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f805 	bl	800779c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007792:	f000 f8d7 	bl	8007944 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007796:	bf00      	nop
 8007798:	e7f0      	b.n	800777c <prvTimerTask+0x8>
	...

0800779c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077a6:	f7ff f811 	bl	80067cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f866 	bl	8007880 <prvSampleTimeNow>
 80077b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d130      	bne.n	800781e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <prvProcessTimerOrBlockTask+0x3c>
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d806      	bhi.n	80077d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077ca:	f7ff f80d 	bl	80067e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ff81 	bl	80076d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077d6:	e024      	b.n	8007822 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077de:	4b13      	ldr	r3, [pc, #76]	@ (800782c <prvProcessTimerOrBlockTask+0x90>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <prvProcessTimerOrBlockTask+0x50>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <prvProcessTimerOrBlockTask+0x52>
 80077ec:	2300      	movs	r3, #0
 80077ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007830 <prvProcessTimerOrBlockTask+0x94>)
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	f7fe fd4d 	bl	800629c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007802:	f7fe fff1 	bl	80067e8 <xTaskResumeAll>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800780c:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <prvProcessTimerOrBlockTask+0x98>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	f3bf 8f6f 	isb	sy
}
 800781c:	e001      	b.n	8007822 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800781e:	f7fe ffe3 	bl	80067e8 <xTaskResumeAll>
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000e3c 	.word	0x20000e3c
 8007830:	20000e40 	.word	0x20000e40
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007840:	4b0e      	ldr	r3, [pc, #56]	@ (800787c <prvGetNextExpireTime+0x44>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <prvGetNextExpireTime+0x16>
 800784a:	2201      	movs	r2, #1
 800784c:	e000      	b.n	8007850 <prvGetNextExpireTime+0x18>
 800784e:	2200      	movs	r2, #0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d105      	bne.n	8007868 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800785c:	4b07      	ldr	r3, [pc, #28]	@ (800787c <prvGetNextExpireTime+0x44>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e001      	b.n	800786c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000e38 	.word	0x20000e38

08007880 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007888:	f7ff f84c 	bl	8006924 <xTaskGetTickCount>
 800788c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800788e:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <prvSampleTimeNow+0x3c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	d205      	bcs.n	80078a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007898:	f000 f93a 	bl	8007b10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e002      	b.n	80078aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078aa:	4a04      	ldr	r2, [pc, #16]	@ (80078bc <prvSampleTimeNow+0x3c>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000e48 	.word	0x20000e48

080078c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d812      	bhi.n	800790c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	1ad2      	subs	r2, r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d302      	bcc.n	80078fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e01b      	b.n	8007932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078fa:	4b10      	ldr	r3, [pc, #64]	@ (800793c <prvInsertTimerInActiveList+0x7c>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f7fd ffa0 	bl	800584a <vListInsert>
 800790a:	e012      	b.n	8007932 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d206      	bcs.n	8007922 <prvInsertTimerInActiveList+0x62>
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d302      	bcc.n	8007922 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e007      	b.n	8007932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <prvInsertTimerInActiveList+0x80>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3304      	adds	r3, #4
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7fd ff8c 	bl	800584a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007932:	697b      	ldr	r3, [r7, #20]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000e3c 	.word	0x20000e3c
 8007940:	20000e38 	.word	0x20000e38

08007944 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	@ 0x38
 8007948:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800794a:	e0ce      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	da19      	bge.n	8007986 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	3304      	adds	r3, #4
 8007956:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	61fb      	str	r3, [r7, #28]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797c:	6850      	ldr	r0, [r2, #4]
 800797e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007980:	6892      	ldr	r2, [r2, #8]
 8007982:	4611      	mov	r1, r2
 8007984:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f2c0 80ae 	blt.w	8007aea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	3304      	adds	r3, #4
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd ff8c 	bl	80058bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079a4:	463b      	mov	r3, r7
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff ff6a 	bl	8007880 <prvSampleTimeNow>
 80079ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b09      	cmp	r3, #9
 80079b2:	f200 8097 	bhi.w	8007ae4 <prvProcessReceivedCommands+0x1a0>
 80079b6:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <prvProcessReceivedCommands+0x78>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079e5 	.word	0x080079e5
 80079c8:	08007a5b 	.word	0x08007a5b
 80079cc:	08007a6f 	.word	0x08007a6f
 80079d0:	08007abb 	.word	0x08007abb
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079e5 	.word	0x080079e5
 80079dc:	08007a5b 	.word	0x08007a5b
 80079e0:	08007a6f 	.word	0x08007a6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	18d1      	adds	r1, r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a04:	f7ff ff5c 	bl	80078c0 <prvInsertTimerInActiveList>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d06c      	beq.n	8007ae8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d061      	beq.n	8007ae8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	441a      	add	r2, r3
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a36:	f7ff fe01 	bl	800763c <xTimerGenericCommand>
 8007a3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d152      	bne.n	8007ae8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	61bb      	str	r3, [r7, #24]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a6c:	e03d      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10b      	bne.n	8007aa6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	617b      	str	r3, [r7, #20]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	18d1      	adds	r1, r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab4:	f7ff ff04 	bl	80078c0 <prvInsertTimerInActiveList>
					break;
 8007ab8:	e017      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aca:	f000 fbe5 	bl	8008298 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ace:	e00c      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ae2:	e002      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <prvProcessReceivedCommands+0x1a6>
					break;
 8007ae8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	4b08      	ldr	r3, [pc, #32]	@ (8007b0c <prvProcessReceivedCommands+0x1c8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1d39      	adds	r1, r7, #4
 8007af0:	2200      	movs	r2, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f9b6 	bl	8005e64 <xQueueReceive>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f47f af26 	bne.w	800794c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	3730      	adds	r7, #48	@ 0x30
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000e40 	.word	0x20000e40

08007b10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b16:	e049      	b.n	8007bac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b18:	4b2e      	ldr	r3, [pc, #184]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b22:	4b2c      	ldr	r3, [pc, #176]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fec3 	bl	80058bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d02f      	beq.n	8007bac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4413      	add	r3, r2
 8007b54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d90e      	bls.n	8007b7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7fd fe68 	bl	800584a <vListInsert>
 8007b7a:	e017      	b.n	8007bac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff fd58 	bl	800763c <xTimerGenericCommand>
 8007b8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	603b      	str	r3, [r7, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	bf00      	nop
 8007baa:	e7fd      	b.n	8007ba8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bac:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1b0      	bne.n	8007b18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bb6:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <prvSwitchTimerLists+0xc8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a04      	ldr	r2, [pc, #16]	@ (8007bd4 <prvSwitchTimerLists+0xc4>)
 8007bc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bc4:	4a04      	ldr	r2, [pc, #16]	@ (8007bd8 <prvSwitchTimerLists+0xc8>)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000e38 	.word	0x20000e38
 8007bd8:	20000e3c 	.word	0x20000e3c

08007bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007be2:	f000 f969 	bl	8007eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007be6:	4b15      	ldr	r3, [pc, #84]	@ (8007c3c <prvCheckForValidListAndQueue+0x60>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d120      	bne.n	8007c30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007bee:	4814      	ldr	r0, [pc, #80]	@ (8007c40 <prvCheckForValidListAndQueue+0x64>)
 8007bf0:	f7fd fdda 	bl	80057a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007bf4:	4813      	ldr	r0, [pc, #76]	@ (8007c44 <prvCheckForValidListAndQueue+0x68>)
 8007bf6:	f7fd fdd7 	bl	80057a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007bfa:	4b13      	ldr	r3, [pc, #76]	@ (8007c48 <prvCheckForValidListAndQueue+0x6c>)
 8007bfc:	4a10      	ldr	r2, [pc, #64]	@ (8007c40 <prvCheckForValidListAndQueue+0x64>)
 8007bfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c00:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <prvCheckForValidListAndQueue+0x70>)
 8007c02:	4a10      	ldr	r2, [pc, #64]	@ (8007c44 <prvCheckForValidListAndQueue+0x68>)
 8007c04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c06:	2300      	movs	r3, #0
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <prvCheckForValidListAndQueue+0x74>)
 8007c0c:	4a11      	ldr	r2, [pc, #68]	@ (8007c54 <prvCheckForValidListAndQueue+0x78>)
 8007c0e:	2110      	movs	r1, #16
 8007c10:	200a      	movs	r0, #10
 8007c12:	f7fd fee7 	bl	80059e4 <xQueueGenericCreateStatic>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4a08      	ldr	r2, [pc, #32]	@ (8007c3c <prvCheckForValidListAndQueue+0x60>)
 8007c1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c1c:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <prvCheckForValidListAndQueue+0x60>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c24:	4b05      	ldr	r3, [pc, #20]	@ (8007c3c <prvCheckForValidListAndQueue+0x60>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	490b      	ldr	r1, [pc, #44]	@ (8007c58 <prvCheckForValidListAndQueue+0x7c>)
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fb0c 	bl	8006248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c30:	f000 f974 	bl	8007f1c <vPortExitCritical>
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000e40 	.word	0x20000e40
 8007c40:	20000e10 	.word	0x20000e10
 8007c44:	20000e24 	.word	0x20000e24
 8007c48:	20000e38 	.word	0x20000e38
 8007c4c:	20000e3c 	.word	0x20000e3c
 8007c50:	20000eec 	.word	0x20000eec
 8007c54:	20000e4c 	.word	0x20000e4c
 8007c58:	080099f4 	.word	0x080099f4

08007c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b04      	subs	r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc0 <pxPortInitialiseStack+0x64>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b14      	subs	r3, #20
 8007c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f06f 0202 	mvn.w	r2, #2
 8007caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3b20      	subs	r3, #32
 8007cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	08007cc5 	.word	0x08007cc5

08007cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cce:	4b13      	ldr	r3, [pc, #76]	@ (8007d1c <prvTaskExitError+0x58>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd6:	d00b      	beq.n	8007cf0 <prvTaskExitError+0x2c>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	e7fd      	b.n	8007cec <prvTaskExitError+0x28>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60bb      	str	r3, [r7, #8]
}
 8007d02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d04:	bf00      	nop
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0fc      	beq.n	8007d06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	2000000c 	.word	0x2000000c

08007d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <pxCurrentTCBConst2>)
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	6808      	ldr	r0, [r1, #0]
 8007d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	f380 8809 	msr	PSP, r0
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f380 8811 	msr	BASEPRI, r0
 8007d3a:	4770      	bx	lr
 8007d3c:	f3af 8000 	nop.w

08007d40 <pxCurrentTCBConst2>:
 8007d40:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d48:	4808      	ldr	r0, [pc, #32]	@ (8007d6c <prvPortStartFirstTask+0x24>)
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f380 8808 	msr	MSP, r0
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f380 8814 	msr	CONTROL, r0
 8007d5a:	b662      	cpsie	i
 8007d5c:	b661      	cpsie	f
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	df00      	svc	0
 8007d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d6a:	bf00      	nop
 8007d6c:	e000ed08 	.word	0xe000ed08

08007d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d76:	4b47      	ldr	r3, [pc, #284]	@ (8007e94 <xPortStartScheduler+0x124>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a47      	ldr	r2, [pc, #284]	@ (8007e98 <xPortStartScheduler+0x128>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10b      	bne.n	8007d98 <xPortStartScheduler+0x28>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	613b      	str	r3, [r7, #16]
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d98:	4b3e      	ldr	r3, [pc, #248]	@ (8007e94 <xPortStartScheduler+0x124>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e9c <xPortStartScheduler+0x12c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10b      	bne.n	8007dba <xPortStartScheduler+0x4a>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60fb      	str	r3, [r7, #12]
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	e7fd      	b.n	8007db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dba:	4b39      	ldr	r3, [pc, #228]	@ (8007ea0 <xPortStartScheduler+0x130>)
 8007dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	22ff      	movs	r2, #255	@ 0xff
 8007dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	4b31      	ldr	r3, [pc, #196]	@ (8007ea4 <xPortStartScheduler+0x134>)
 8007de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007de2:	4b31      	ldr	r3, [pc, #196]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007de4:	2207      	movs	r2, #7
 8007de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007de8:	e009      	b.n	8007dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007dea:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4a2d      	ldr	r2, [pc, #180]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e06:	2b80      	cmp	r3, #128	@ 0x80
 8007e08:	d0ef      	beq.n	8007dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1c3 0307 	rsb	r3, r3, #7
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d00b      	beq.n	8007e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60bb      	str	r3, [r7, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e40:	4a19      	ldr	r2, [pc, #100]	@ (8007ea8 <xPortStartScheduler+0x138>)
 8007e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e4c:	4b17      	ldr	r3, [pc, #92]	@ (8007eac <xPortStartScheduler+0x13c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a16      	ldr	r2, [pc, #88]	@ (8007eac <xPortStartScheduler+0x13c>)
 8007e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e58:	4b14      	ldr	r3, [pc, #80]	@ (8007eac <xPortStartScheduler+0x13c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <xPortStartScheduler+0x13c>)
 8007e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e64:	f000 f8da 	bl	800801c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e68:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <xPortStartScheduler+0x140>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e6e:	f000 f8f9 	bl	8008064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e72:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <xPortStartScheduler+0x144>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0f      	ldr	r2, [pc, #60]	@ (8007eb4 <xPortStartScheduler+0x144>)
 8007e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e7e:	f7ff ff63 	bl	8007d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e82:	f7fe fe19 	bl	8006ab8 <vTaskSwitchContext>
	prvTaskExitError();
 8007e86:	f7ff ff1d 	bl	8007cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	e000ed00 	.word	0xe000ed00
 8007e98:	410fc271 	.word	0x410fc271
 8007e9c:	410fc270 	.word	0x410fc270
 8007ea0:	e000e400 	.word	0xe000e400
 8007ea4:	20000f3c 	.word	0x20000f3c
 8007ea8:	20000f40 	.word	0x20000f40
 8007eac:	e000ed20 	.word	0xe000ed20
 8007eb0:	2000000c 	.word	0x2000000c
 8007eb4:	e000ef34 	.word	0xe000ef34

08007eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
}
 8007ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed2:	4b10      	ldr	r3, [pc, #64]	@ (8007f14 <vPortEnterCritical+0x5c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8007f14 <vPortEnterCritical+0x5c>)
 8007eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007edc:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <vPortEnterCritical+0x5c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d110      	bne.n	8007f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <vPortEnterCritical+0x60>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	603b      	str	r3, [r7, #0]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <vPortEnterCritical+0x4a>
	}
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	2000000c 	.word	0x2000000c
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f22:	4b12      	ldr	r3, [pc, #72]	@ (8007f6c <vPortExitCritical+0x50>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <vPortExitCritical+0x26>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f42:	4b0a      	ldr	r3, [pc, #40]	@ (8007f6c <vPortExitCritical+0x50>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a08      	ldr	r2, [pc, #32]	@ (8007f6c <vPortExitCritical+0x50>)
 8007f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f4c:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <vPortExitCritical+0x50>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <vPortExitCritical+0x44>
 8007f54:	2300      	movs	r3, #0
 8007f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f383 8811 	msr	BASEPRI, r3
}
 8007f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	2000000c 	.word	0x2000000c

08007f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f70:	f3ef 8009 	mrs	r0, PSP
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	4b15      	ldr	r3, [pc, #84]	@ (8007fd0 <pxCurrentTCBConst>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f01e 0f10 	tst.w	lr, #16
 8007f80:	bf08      	it	eq
 8007f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f94:	f380 8811 	msr	BASEPRI, r0
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f7fe fd8a 	bl	8006ab8 <vTaskSwitchContext>
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f380 8811 	msr	BASEPRI, r0
 8007fac:	bc09      	pop	{r0, r3}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb6:	f01e 0f10 	tst.w	lr, #16
 8007fba:	bf08      	it	eq
 8007fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fc0:	f380 8809 	msr	PSP, r0
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst>:
 8007fd0:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ff2:	f7fe fca7 	bl	8006944 <xTaskIncrementTick>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <xPortSysTickHandler+0x40>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	2300      	movs	r3, #0
 8008006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f383 8811 	msr	BASEPRI, r3
}
 800800e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	e000ed04 	.word	0xe000ed04

0800801c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008020:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <vPortSetupTimerInterrupt+0x34>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008026:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <vPortSetupTimerInterrupt+0x38>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <vPortSetupTimerInterrupt+0x3c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a0a      	ldr	r2, [pc, #40]	@ (800805c <vPortSetupTimerInterrupt+0x40>)
 8008032:	fba2 2303 	umull	r2, r3, r2, r3
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	4a09      	ldr	r2, [pc, #36]	@ (8008060 <vPortSetupTimerInterrupt+0x44>)
 800803a:	3b01      	subs	r3, #1
 800803c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800803e:	4b04      	ldr	r3, [pc, #16]	@ (8008050 <vPortSetupTimerInterrupt+0x34>)
 8008040:	2207      	movs	r2, #7
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	e000e010 	.word	0xe000e010
 8008054:	e000e018 	.word	0xe000e018
 8008058:	20000000 	.word	0x20000000
 800805c:	10624dd3 	.word	0x10624dd3
 8008060:	e000e014 	.word	0xe000e014

08008064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008074 <vPortEnableVFP+0x10>
 8008068:	6801      	ldr	r1, [r0, #0]
 800806a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800806e:	6001      	str	r1, [r0, #0]
 8008070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008072:	bf00      	nop
 8008074:	e000ed88 	.word	0xe000ed88

08008078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800807e:	f3ef 8305 	mrs	r3, IPSR
 8008082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d915      	bls.n	80080b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800808a:	4a18      	ldr	r2, [pc, #96]	@ (80080ec <vPortValidateInterruptPriority+0x74>)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008094:	4b16      	ldr	r3, [pc, #88]	@ (80080f0 <vPortValidateInterruptPriority+0x78>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	7afa      	ldrb	r2, [r7, #11]
 800809a:	429a      	cmp	r2, r3
 800809c:	d20b      	bcs.n	80080b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080b6:	4b0f      	ldr	r3, [pc, #60]	@ (80080f4 <vPortValidateInterruptPriority+0x7c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <vPortValidateInterruptPriority+0x80>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d90b      	bls.n	80080de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	603b      	str	r3, [r7, #0]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <vPortValidateInterruptPriority+0x62>
	}
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	e000e3f0 	.word	0xe000e3f0
 80080f0:	20000f3c 	.word	0x20000f3c
 80080f4:	e000ed0c 	.word	0xe000ed0c
 80080f8:	20000f40 	.word	0x20000f40

080080fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	@ 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008108:	f7fe fb60 	bl	80067cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800810c:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <pvPortMalloc+0x184>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008114:	f000 f924 	bl	8008360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008118:	4b5a      	ldr	r3, [pc, #360]	@ (8008284 <pvPortMalloc+0x188>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8095 	bne.w	8008250 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01e      	beq.n	800816a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800812c:	2208      	movs	r2, #8
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4413      	add	r3, r2
 8008132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d015      	beq.n	800816a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <pvPortMalloc+0x6e>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	617b      	str	r3, [r7, #20]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d06f      	beq.n	8008250 <pvPortMalloc+0x154>
 8008170:	4b45      	ldr	r3, [pc, #276]	@ (8008288 <pvPortMalloc+0x18c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d86a      	bhi.n	8008250 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800817a:	4b44      	ldr	r3, [pc, #272]	@ (800828c <pvPortMalloc+0x190>)
 800817c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800817e:	4b43      	ldr	r3, [pc, #268]	@ (800828c <pvPortMalloc+0x190>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008184:	e004      	b.n	8008190 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d903      	bls.n	80081a2 <pvPortMalloc+0xa6>
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f1      	bne.n	8008186 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081a2:	4b37      	ldr	r3, [pc, #220]	@ (8008280 <pvPortMalloc+0x184>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d051      	beq.n	8008250 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2208      	movs	r2, #8
 80081b2:	4413      	add	r3, r2
 80081b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	1ad2      	subs	r2, r2, r3
 80081c6:	2308      	movs	r3, #8
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d920      	bls.n	8008210 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	f003 0307 	and.w	r3, r3, #7
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <pvPortMalloc+0xfc>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800820a:	69b8      	ldr	r0, [r7, #24]
 800820c:	f000 f90a 	bl	8008424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008210:	4b1d      	ldr	r3, [pc, #116]	@ (8008288 <pvPortMalloc+0x18c>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	4a1b      	ldr	r2, [pc, #108]	@ (8008288 <pvPortMalloc+0x18c>)
 800821c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800821e:	4b1a      	ldr	r3, [pc, #104]	@ (8008288 <pvPortMalloc+0x18c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b1b      	ldr	r3, [pc, #108]	@ (8008290 <pvPortMalloc+0x194>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d203      	bcs.n	8008232 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800822a:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <pvPortMalloc+0x18c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a18      	ldr	r2, [pc, #96]	@ (8008290 <pvPortMalloc+0x194>)
 8008230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <pvPortMalloc+0x188>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	431a      	orrs	r2, r3
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008246:	4b13      	ldr	r3, [pc, #76]	@ (8008294 <pvPortMalloc+0x198>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	4a11      	ldr	r2, [pc, #68]	@ (8008294 <pvPortMalloc+0x198>)
 800824e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008250:	f7fe faca 	bl	80067e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00b      	beq.n	8008276 <pvPortMalloc+0x17a>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	60fb      	str	r3, [r7, #12]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <pvPortMalloc+0x176>
	return pvReturn;
 8008276:	69fb      	ldr	r3, [r7, #28]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3728      	adds	r7, #40	@ 0x28
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20004b4c 	.word	0x20004b4c
 8008284:	20004b60 	.word	0x20004b60
 8008288:	20004b50 	.word	0x20004b50
 800828c:	20004b44 	.word	0x20004b44
 8008290:	20004b54 	.word	0x20004b54
 8008294:	20004b58 	.word	0x20004b58

08008298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d04f      	beq.n	800834a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082aa:	2308      	movs	r3, #8
 80082ac:	425b      	negs	r3, r3
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4413      	add	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	4b25      	ldr	r3, [pc, #148]	@ (8008354 <vPortFree+0xbc>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <vPortFree+0x46>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <vPortFree+0x66>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	60bb      	str	r3, [r7, #8]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	4b14      	ldr	r3, [pc, #80]	@ (8008354 <vPortFree+0xbc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4013      	ands	r3, r2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01e      	beq.n	800834a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11a      	bne.n	800834a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <vPortFree+0xbc>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	43db      	mvns	r3, r3
 800831e:	401a      	ands	r2, r3
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008324:	f7fe fa52 	bl	80067cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <vPortFree+0xc0>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4413      	add	r3, r2
 8008332:	4a09      	ldr	r2, [pc, #36]	@ (8008358 <vPortFree+0xc0>)
 8008334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008336:	6938      	ldr	r0, [r7, #16]
 8008338:	f000 f874 	bl	8008424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <vPortFree+0xc4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	4a06      	ldr	r2, [pc, #24]	@ (800835c <vPortFree+0xc4>)
 8008344:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008346:	f7fe fa4f 	bl	80067e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800834a:	bf00      	nop
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20004b60 	.word	0x20004b60
 8008358:	20004b50 	.word	0x20004b50
 800835c:	20004b5c 	.word	0x20004b5c

08008360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008366:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800836a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800836c:	4b27      	ldr	r3, [pc, #156]	@ (800840c <prvHeapInit+0xac>)
 800836e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00c      	beq.n	8008394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3307      	adds	r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	4a1f      	ldr	r2, [pc, #124]	@ (800840c <prvHeapInit+0xac>)
 8008390:	4413      	add	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008398:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <prvHeapInit+0xb0>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800839e:	4b1c      	ldr	r3, [pc, #112]	@ (8008410 <prvHeapInit+0xb0>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	4413      	add	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083ac:	2208      	movs	r2, #8
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0307 	bic.w	r3, r3, #7
 80083ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4a15      	ldr	r2, [pc, #84]	@ (8008414 <prvHeapInit+0xb4>)
 80083c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083c2:	4b14      	ldr	r3, [pc, #80]	@ (8008414 <prvHeapInit+0xb4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2200      	movs	r2, #0
 80083c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ca:	4b12      	ldr	r3, [pc, #72]	@ (8008414 <prvHeapInit+0xb4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	1ad2      	subs	r2, r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <prvHeapInit+0xb4>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008418 <prvHeapInit+0xb8>)
 80083ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a09      	ldr	r2, [pc, #36]	@ (800841c <prvHeapInit+0xbc>)
 80083f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083f8:	4b09      	ldr	r3, [pc, #36]	@ (8008420 <prvHeapInit+0xc0>)
 80083fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083fe:	601a      	str	r2, [r3, #0]
}
 8008400:	bf00      	nop
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	20000f44 	.word	0x20000f44
 8008410:	20004b44 	.word	0x20004b44
 8008414:	20004b4c 	.word	0x20004b4c
 8008418:	20004b54 	.word	0x20004b54
 800841c:	20004b50 	.word	0x20004b50
 8008420:	20004b60 	.word	0x20004b60

08008424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800842c:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <prvInsertBlockIntoFreeList+0xac>)
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e002      	b.n	8008438 <prvInsertBlockIntoFreeList+0x14>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d8f7      	bhi.n	8008432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4413      	add	r3, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d108      	bne.n	8008466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d118      	bne.n	80084ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4b15      	ldr	r3, [pc, #84]	@ (80084d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d00d      	beq.n	80084a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	441a      	add	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e008      	b.n	80084b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084a2:	4b0c      	ldr	r3, [pc, #48]	@ (80084d4 <prvInsertBlockIntoFreeList+0xb0>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	e003      	b.n	80084b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d002      	beq.n	80084c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20004b44 	.word	0x20004b44
 80084d4:	20004b4c 	.word	0x20004b4c

080084d8 <PCA9685_SoftwareReset>:
 * @details 7.6 section of datasheet
 * 
 * @return PCA9685_STATUS 
 */
PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af02      	add	r7, sp, #8
	uint8_t reset_command = 0x06; // Comando de reinicio por software
 80084de:	2306      	movs	r3, #6
 80084e0:	71fb      	strb	r3, [r7, #7]

	if( HAL_OK != HAL_I2C_Master_Transmit( pca9685_i2c, PCA9685_GENERAL_CALL_ADDRESS, &reset_command, 1, PCA9685_I2C_TIMEOUT ) )
 80084e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008510 <PCA9685_SoftwareReset+0x38>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	1dfa      	adds	r2, r7, #7
 80084e8:	2364      	movs	r3, #100	@ 0x64
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	2301      	movs	r3, #1
 80084ee:	2100      	movs	r1, #0
 80084f0:	f7f9 fe4e 	bl	8002190 <HAL_I2C_Master_Transmit>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e003      	b.n	8008506 <PCA9685_SoftwareReset+0x2e>
	}

	osDelay(10);
 80084fe:	200a      	movs	r0, #10
 8008500:	f7fd f903 	bl	800570a <osDelay>

	return PCA9685_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20004b64 	.word	0x20004b64
 8008514:	00000000 	.word	0x00000000

08008518 <PCA9685_SetPwmFrequency>:
 * 
 * @param Frequency iz Hz
 * @return PCA9685_STATUS 
 */
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8008528:	4293      	cmp	r3, r2
 800852a:	d902      	bls.n	8008532 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 800852c:	2303      	movs	r3, #3
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	e045      	b.n	80085be <PCA9685_SetPwmFrequency+0xa6>
	}
	else if(Frequency <= 24)
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	2b18      	cmp	r3, #24
 8008536:	d802      	bhi.n	800853e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8008538:	23ff      	movs	r3, #255	@ 0xff
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	e03f      	b.n	80085be <PCA9685_SetPwmFrequency+0xa6>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 800853e:	88fb      	ldrh	r3, [r7, #6]
 8008540:	ee07 3a90 	vmov	s15, r3
 8008544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008548:	ee17 0a90 	vmov	r0, s15
 800854c:	f7f8 f814 	bl	8000578 <__aeabi_f2d>
 8008550:	f04f 0200 	mov.w	r2, #0
 8008554:	4b40      	ldr	r3, [pc, #256]	@ (8008658 <PCA9685_SetPwmFrequency+0x140>)
 8008556:	f7f8 f867 	bl	8000628 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	a13c      	add	r1, pc, #240	@ (adr r1, 8008650 <PCA9685_SetPwmFrequency+0x138>)
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	f7f8 f98a 	bl	800087c <__aeabi_ddiv>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4610      	mov	r0, r2
 800856e:	4619      	mov	r1, r3
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	4b39      	ldr	r3, [pc, #228]	@ (800865c <PCA9685_SetPwmFrequency+0x144>)
 8008576:	f7f7 fe9f 	bl	80002b8 <__aeabi_dsub>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	f7f8 fb0b 	bl	8000b9c <__aeabi_d2f>
 8008586:	4603      	mov	r3, r0
 8008588:	613b      	str	r3, [r7, #16]
		Prescale = floor(PrescalerVal + 0.5);
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f7f7 fff4 	bl	8000578 <__aeabi_f2d>
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	4b32      	ldr	r3, [pc, #200]	@ (8008660 <PCA9685_SetPwmFrequency+0x148>)
 8008596:	f7f7 fe91 	bl	80002bc <__adddf3>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	ec43 2b17 	vmov	d7, r2, r3
 80085a2:	eeb0 0a47 	vmov.f32	s0, s14
 80085a6:	eef0 0a67 	vmov.f32	s1, s15
 80085aa:	f000 f9cd 	bl	8008948 <floor>
 80085ae:	ec53 2b10 	vmov	r2, r3, d0
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7f8 fad1 	bl	8000b5c <__aeabi_d2uiz>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t old_mode;

	if( PCA9685_OK != PCA9685_ReadRegisters( PCA9685_MODE1, &old_mode, 1 ) ) // 1 read old_mode
 80085be:	f107 030e 	add.w	r3, r7, #14
 80085c2:	2201      	movs	r2, #1
 80085c4:	4619      	mov	r1, r3
 80085c6:	2000      	movs	r0, #0
 80085c8:	f000 f99a 	bl	8008900 <PCA9685_ReadRegisters>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <PCA9685_SetPwmFrequency+0xbe>
	{
		return PCA9685_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e037      	b.n	8008646 <PCA9685_SetPwmFrequency+0x12e>
	}

  	uint8_t new_mode = ( old_mode & 0x7F ) | 0x10; // sleep //2
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	b25b      	sxtb	r3, r3
 80085da:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	f043 0310 	orr.w	r3, r3, #16
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	73fb      	strb	r3, [r7, #15]

	if( PCA9685_OK != PCA9685_WriteReg( PCA9685_MODE1, new_mode ) ) // 3 go to sleep
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	4619      	mov	r1, r3
 80085ec:	2000      	movs	r0, #0
 80085ee:	f000 f965 	bl	80088bc <PCA9685_WriteReg>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <PCA9685_SetPwmFrequency+0xe4>
	{
		return PCA9685_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e024      	b.n	8008646 <PCA9685_SetPwmFrequency+0x12e>
	}

	if( PCA9685_OK != PCA9685_WriteReg( PCA9685_PRESCALE, Prescale ) ) // 4 Set prescale
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	4619      	mov	r1, r3
 8008600:	20fe      	movs	r0, #254	@ 0xfe
 8008602:	f000 f95b 	bl	80088bc <PCA9685_WriteReg>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <PCA9685_SetPwmFrequency+0xf8>
	{
		return PCA9685_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e01a      	b.n	8008646 <PCA9685_SetPwmFrequency+0x12e>
	}

	if( PCA9685_OK != PCA9685_WriteReg( PCA9685_MODE1, old_mode ) ) // 5
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	4619      	mov	r1, r3
 8008614:	2000      	movs	r0, #0
 8008616:	f000 f951 	bl	80088bc <PCA9685_WriteReg>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <PCA9685_SetPwmFrequency+0x10c>
	{
		return PCA9685_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e010      	b.n	8008646 <PCA9685_SetPwmFrequency+0x12e>
	}

	osDelay(10);
 8008624:	200a      	movs	r0, #10
 8008626:	f7fd f870 	bl	800570a <osDelay>

	if( PCA9685_OK != PCA9685_WriteReg( PCA9685_MODE1, old_mode | 0xA0 ) ) //6 //  This sets the MODE1 register to turn on auto increment.
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	2000      	movs	r0, #0
 8008636:	f000 f941 	bl	80088bc <PCA9685_WriteReg>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <PCA9685_SetPwmFrequency+0x12c>
	{
		return PCA9685_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <PCA9685_SetPwmFrequency+0x12e>
	}

	return PCA9685_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	00000000 	.word	0x00000000
 8008654:	4177d784 	.word	0x4177d784
 8008658:	40b00000 	.word	0x40b00000
 800865c:	3ff00000 	.word	0x3ff00000
 8008660:	3fe00000 	.word	0x3fe00000

08008664 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af04      	add	r7, sp, #16
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
 800866e:	460b      	mov	r3, r1
 8008670:	80bb      	strh	r3, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t data[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	b2db      	uxtb	r3, r3
 800867c:	3306      	adds	r3, #6
 800867e:	73fb      	strb	r3, [r7, #15]
	data[0] = OnTime & 0xFF;
 8008680:	88bb      	ldrh	r3, [r7, #4]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	723b      	strb	r3, [r7, #8]
	data[1] = OnTime>>8;
 8008686:	88bb      	ldrh	r3, [r7, #4]
 8008688:	0a1b      	lsrs	r3, r3, #8
 800868a:	b29b      	uxth	r3, r3
 800868c:	b2db      	uxtb	r3, r3
 800868e:	727b      	strb	r3, [r7, #9]
	data[2] = OffTime & 0xFF;
 8008690:	887b      	ldrh	r3, [r7, #2]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	72bb      	strb	r3, [r7, #10]
	data[3] = OffTime>>8;
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	b29b      	uxth	r3, r3
 800869c:	b2db      	uxtb	r3, r3
 800869e:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_I2C_WRITE_ADDR, RegisterAddress, 1, data, 4, PCA9685_I2C_TIMEOUT ))
 80086a0:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <PCA9685_SetPwm+0x70>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	2364      	movs	r3, #100	@ 0x64
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	2304      	movs	r3, #4
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	2301      	movs	r3, #1
 80086b8:	2181      	movs	r1, #129	@ 0x81
 80086ba:	f7f9 fe67 	bl	800238c <HAL_I2C_Mem_Write>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e000      	b.n	80086ca <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20004b64 	.word	0x20004b64

080086d8 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
 80086e2:	460b      	mov	r3, r1
 80086e4:	80bb      	strh	r3, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80086ea:	88bb      	ldrh	r3, [r7, #4]
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f0:	d302      	bcc.n	80086f8 <PCA9685_SetPin+0x20>
 80086f2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80086f6:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80086f8:	79bb      	ldrb	r3, [r7, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d025      	beq.n	800874a <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80086fe:	88bb      	ldrh	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d108      	bne.n	8008716 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2200      	movs	r2, #0
 8008708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff ffa9 	bl	8008664 <PCA9685_SetPwm>
 8008712:	4603      	mov	r3, r0
 8008714:	e03a      	b.n	800878c <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8008716:	88bb      	ldrh	r3, [r7, #4]
 8008718:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800871c:	4293      	cmp	r3, r2
 800871e:	d108      	bne.n	8008732 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff ff9b 	bl	8008664 <PCA9685_SetPwm>
 800872e:	4603      	mov	r3, r0
 8008730:	e02c      	b.n	800878c <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8008732:	88bb      	ldrh	r3, [r7, #4]
 8008734:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8008738:	330f      	adds	r3, #15
 800873a:	b29a      	uxth	r2, r3
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff ff8f 	bl	8008664 <PCA9685_SetPwm>
 8008746:	4603      	mov	r3, r0
 8008748:	e020      	b.n	800878c <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800874a:	88bb      	ldrh	r3, [r7, #4]
 800874c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8008750:	4293      	cmp	r3, r2
 8008752:	d108      	bne.n	8008766 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2200      	movs	r2, #0
 8008758:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ff81 	bl	8008664 <PCA9685_SetPwm>
 8008762:	4603      	mov	r3, r0
 8008764:	e012      	b.n	800878c <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8008766:	88bb      	ldrh	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ff75 	bl	8008664 <PCA9685_SetPwm>
 800877a:	4603      	mov	r3, r0
 800877c:	e006      	b.n	800878c <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 800877e:	88ba      	ldrh	r2, [r7, #4]
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff ff6d 	bl	8008664 <PCA9685_SetPwm>
 800878a:	4603      	mov	r3, r0
    }
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0000      	movs	r0, r0
	...

08008798 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	ed87 0a00 	vstr	s0, [r7]
 80087a4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80087a6:	edd7 7a00 	vldr	s15, [r7]
 80087aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b2:	d502      	bpl.n	80087ba <PCA9685_SetServoAngle+0x22>
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80087ba:	edd7 7a00 	vldr	s15, [r7]
 80087be:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008840 <PCA9685_SetServoAngle+0xa8>
 80087c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ca:	dd01      	ble.n	80087d0 <PCA9685_SetServoAngle+0x38>
 80087cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008844 <PCA9685_SetServoAngle+0xac>)
 80087ce:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80087d0:	6838      	ldr	r0, [r7, #0]
 80087d2:	f7f7 fed1 	bl	8000578 <__aeabi_f2d>
 80087d6:	a318      	add	r3, pc, #96	@ (adr r3, 8008838 <PCA9685_SetServoAngle+0xa0>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f7 ff24 	bl	8000628 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	4b16      	ldr	r3, [pc, #88]	@ (8008848 <PCA9685_SetServoAngle+0xb0>)
 80087ee:	f7f8 f845 	bl	800087c <__aeabi_ddiv>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4610      	mov	r0, r2
 80087f8:	4619      	mov	r1, r3
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	4b13      	ldr	r3, [pc, #76]	@ (800884c <PCA9685_SetServoAngle+0xb4>)
 8008800:	f7f7 fd5c 	bl	80002bc <__adddf3>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4610      	mov	r0, r2
 800880a:	4619      	mov	r1, r3
 800880c:	f7f8 f9c6 	bl	8000b9c <__aeabi_d2f>
 8008810:	4603      	mov	r3, r0
 8008812:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8008814:	edd7 7a03 	vldr	s15, [r7, #12]
 8008818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800881c:	ee17 3a90 	vmov	r3, s15
 8008820:	b299      	uxth	r1, r3
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff ff56 	bl	80086d8 <PCA9685_SetPin>
 800882c:	4603      	mov	r3, r0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	00000000 	.word	0x00000000
 800883c:	4079a000 	.word	0x4079a000
 8008840:	43340000 	.word	0x43340000
 8008844:	43340000 	.word	0x43340000
 8008848:	40668000 	.word	0x40668000
 800884c:	40598000 	.word	0x40598000

08008850 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8008858:	4a17      	ldr	r2, [pc, #92]	@ (80088b8 <PCA9685_Init+0x68>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6013      	str	r3, [r2, #0]
	uint8_t mode_1_std_op = 0x00; // modo operacion estandar
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
	uint8_t mode_2_std_op = 0x04; // salida de totem-pole en los pines PWM
 8008862:	2304      	movs	r3, #4
 8008864:	73bb      	strb	r3, [r7, #14]

	if ( PCA9685_ERROR == PCA9685_SoftwareReset() )
 8008866:	f7ff fe37 	bl	80084d8 <PCA9685_SoftwareReset>
 800886a:	4603      	mov	r3, r0
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <PCA9685_Init+0x24>
	{
		return PCA9685_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e01c      	b.n	80088ae <PCA9685_Init+0x5e>
	}

	if ( PCA9685_OK != PCA9685_WriteReg( PCA9685_MODE1, mode_1_std_op  ) )
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	4619      	mov	r1, r3
 8008878:	2000      	movs	r0, #0
 800887a:	f000 f81f 	bl	80088bc <PCA9685_WriteReg>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <PCA9685_Init+0x38>
	{
        return PCA9685_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e012      	b.n	80088ae <PCA9685_Init+0x5e>
	}
    
    // Configurar el registro MODE2
    if ( PCA9685_OK != PCA9685_WriteReg( PCA9685_MODE2, mode_2_std_op  ) )
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	4619      	mov	r1, r3
 800888c:	2001      	movs	r0, #1
 800888e:	f000 f815 	bl	80088bc <PCA9685_WriteReg>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <PCA9685_Init+0x4c>
	{
        return PCA9685_ERROR; 
 8008898:	2301      	movs	r3, #1
 800889a:	e008      	b.n	80088ae <PCA9685_Init+0x5e>
    }

#ifdef PCA9685_SERVO_MODE
	if ( PCA9685_ERROR == PCA9685_SetPwmFrequency( FREQUENCY ) )
 800889c:	2032      	movs	r0, #50	@ 0x32
 800889e:	f7ff fe3b 	bl	8008518 <PCA9685_SetPwmFrequency>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <PCA9685_Init+0x5c>
#else
	if ( PCA9685_ERROR == PCA9685_SetPwmFrequency(1000) )
#endif
	{
		return PCA9685_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <PCA9685_Init+0x5e>
	}

	return PCA9685_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20004b64 	.word	0x20004b64

080088bc <PCA9685_WriteReg>:
  * @param reg 
  * @param value 
  * @return PCA9685_STATUS 
  */
PCA9685_STATUS PCA9685_WriteReg(uint8_t reg, uint8_t value) 
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	4603      	mov	r3, r0
 80088c4:	460a      	mov	r2, r1
 80088c6:	71fb      	strb	r3, [r7, #7]
 80088c8:	4613      	mov	r3, r2
 80088ca:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, value};
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	733b      	strb	r3, [r7, #12]
 80088d0:	79bb      	ldrb	r3, [r7, #6]
 80088d2:	737b      	strb	r3, [r7, #13]

    if ( HAL_OK != HAL_I2C_Master_Transmit( pca9685_i2c, PCA9685_I2C_WRITE_ADDR, data, 2, PCA9685_I2C_TIMEOUT ) ) 
 80088d4:	4b09      	ldr	r3, [pc, #36]	@ (80088fc <PCA9685_WriteReg+0x40>)
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	f107 020c 	add.w	r2, r7, #12
 80088dc:	2364      	movs	r3, #100	@ 0x64
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	2302      	movs	r3, #2
 80088e2:	2181      	movs	r1, #129	@ 0x81
 80088e4:	f7f9 fc54 	bl	8002190 <HAL_I2C_Master_Transmit>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <PCA9685_WriteReg+0x36>
	{
		return PCA9685_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <PCA9685_WriteReg+0x38>
    }

    return PCA9685_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20004b64 	.word	0x20004b64

08008900 <PCA9685_ReadRegisters>:

PCA9685_STATUS PCA9685_ReadRegisters(uint8_t reg, uint8_t *pdata, uint8_t size_data)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af04      	add	r7, sp, #16
 8008906:	4603      	mov	r3, r0
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	4613      	mov	r3, r2
 800890e:	71bb      	strb	r3, [r7, #6]
	if( HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_I2C_READ_ADDR, reg, 1, pdata, size_data, PCA9685_I2C_TIMEOUT ) )
 8008910:	4b0c      	ldr	r3, [pc, #48]	@ (8008944 <PCA9685_ReadRegisters+0x44>)
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	b29a      	uxth	r2, r3
 8008918:	79bb      	ldrb	r3, [r7, #6]
 800891a:	b29b      	uxth	r3, r3
 800891c:	2164      	movs	r1, #100	@ 0x64
 800891e:	9102      	str	r1, [sp, #8]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	2301      	movs	r3, #1
 8008928:	2180      	movs	r1, #128	@ 0x80
 800892a:	f7f9 fe29 	bl	8002580 <HAL_I2C_Mem_Read>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <PCA9685_ReadRegisters+0x38>
    {
		return PCA9685_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <PCA9685_ReadRegisters+0x3a>
	}

    return PCA9685_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20004b64 	.word	0x20004b64

08008948 <floor>:
 8008948:	ec51 0b10 	vmov	r0, r1, d0
 800894c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008958:	2e13      	cmp	r6, #19
 800895a:	460c      	mov	r4, r1
 800895c:	4605      	mov	r5, r0
 800895e:	4680      	mov	r8, r0
 8008960:	dc34      	bgt.n	80089cc <floor+0x84>
 8008962:	2e00      	cmp	r6, #0
 8008964:	da17      	bge.n	8008996 <floor+0x4e>
 8008966:	a332      	add	r3, pc, #200	@ (adr r3, 8008a30 <floor+0xe8>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fca6 	bl	80002bc <__adddf3>
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	f7f8 f8e8 	bl	8000b48 <__aeabi_dcmpgt>
 8008978:	b150      	cbz	r0, 8008990 <floor+0x48>
 800897a:	2c00      	cmp	r4, #0
 800897c:	da55      	bge.n	8008a2a <floor+0xe2>
 800897e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008982:	432c      	orrs	r4, r5
 8008984:	2500      	movs	r5, #0
 8008986:	42ac      	cmp	r4, r5
 8008988:	4c2b      	ldr	r4, [pc, #172]	@ (8008a38 <floor+0xf0>)
 800898a:	bf08      	it	eq
 800898c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	e023      	b.n	80089de <floor+0x96>
 8008996:	4f29      	ldr	r7, [pc, #164]	@ (8008a3c <floor+0xf4>)
 8008998:	4137      	asrs	r7, r6
 800899a:	ea01 0307 	and.w	r3, r1, r7
 800899e:	4303      	orrs	r3, r0
 80089a0:	d01d      	beq.n	80089de <floor+0x96>
 80089a2:	a323      	add	r3, pc, #140	@ (adr r3, 8008a30 <floor+0xe8>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f7f7 fc88 	bl	80002bc <__adddf3>
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
 80089b0:	f7f8 f8ca 	bl	8000b48 <__aeabi_dcmpgt>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d0eb      	beq.n	8008990 <floor+0x48>
 80089b8:	2c00      	cmp	r4, #0
 80089ba:	bfbe      	ittt	lt
 80089bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80089c0:	4133      	asrlt	r3, r6
 80089c2:	18e4      	addlt	r4, r4, r3
 80089c4:	ea24 0407 	bic.w	r4, r4, r7
 80089c8:	2500      	movs	r5, #0
 80089ca:	e7e1      	b.n	8008990 <floor+0x48>
 80089cc:	2e33      	cmp	r6, #51	@ 0x33
 80089ce:	dd0a      	ble.n	80089e6 <floor+0x9e>
 80089d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80089d4:	d103      	bne.n	80089de <floor+0x96>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	f7f7 fc6f 	bl	80002bc <__adddf3>
 80089de:	ec41 0b10 	vmov	d0, r0, r1
 80089e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80089ea:	f04f 37ff 	mov.w	r7, #4294967295
 80089ee:	40df      	lsrs	r7, r3
 80089f0:	4207      	tst	r7, r0
 80089f2:	d0f4      	beq.n	80089de <floor+0x96>
 80089f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a30 <floor+0xe8>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc5f 	bl	80002bc <__adddf3>
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	f7f8 f8a1 	bl	8000b48 <__aeabi_dcmpgt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0c2      	beq.n	8008990 <floor+0x48>
 8008a0a:	2c00      	cmp	r4, #0
 8008a0c:	da0a      	bge.n	8008a24 <floor+0xdc>
 8008a0e:	2e14      	cmp	r6, #20
 8008a10:	d101      	bne.n	8008a16 <floor+0xce>
 8008a12:	3401      	adds	r4, #1
 8008a14:	e006      	b.n	8008a24 <floor+0xdc>
 8008a16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	40b3      	lsls	r3, r6
 8008a1e:	441d      	add	r5, r3
 8008a20:	4545      	cmp	r5, r8
 8008a22:	d3f6      	bcc.n	8008a12 <floor+0xca>
 8008a24:	ea25 0507 	bic.w	r5, r5, r7
 8008a28:	e7b2      	b.n	8008990 <floor+0x48>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	462c      	mov	r4, r5
 8008a2e:	e7af      	b.n	8008990 <floor+0x48>
 8008a30:	8800759c 	.word	0x8800759c
 8008a34:	7e37e43c 	.word	0x7e37e43c
 8008a38:	bff00000 	.word	0xbff00000
 8008a3c:	000fffff 	.word	0x000fffff

08008a40 <std>:
 8008a40:	2300      	movs	r3, #0
 8008a42:	b510      	push	{r4, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	e9c0 3300 	strd	r3, r3, [r0]
 8008a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a4e:	6083      	str	r3, [r0, #8]
 8008a50:	8181      	strh	r1, [r0, #12]
 8008a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a54:	81c2      	strh	r2, [r0, #14]
 8008a56:	6183      	str	r3, [r0, #24]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	305c      	adds	r0, #92	@ 0x5c
 8008a5e:	f000 f906 	bl	8008c6e <memset>
 8008a62:	4b0d      	ldr	r3, [pc, #52]	@ (8008a98 <std+0x58>)
 8008a64:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a66:	4b0d      	ldr	r3, [pc, #52]	@ (8008a9c <std+0x5c>)
 8008a68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <std+0x60>)
 8008a6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <std+0x64>)
 8008a70:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a72:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <std+0x68>)
 8008a74:	6224      	str	r4, [r4, #32]
 8008a76:	429c      	cmp	r4, r3
 8008a78:	d006      	beq.n	8008a88 <std+0x48>
 8008a7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a7e:	4294      	cmp	r4, r2
 8008a80:	d002      	beq.n	8008a88 <std+0x48>
 8008a82:	33d0      	adds	r3, #208	@ 0xd0
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d105      	bne.n	8008a94 <std+0x54>
 8008a88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a90:	f000 b9bc 	b.w	8008e0c <__retarget_lock_init_recursive>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	08008be9 	.word	0x08008be9
 8008a9c:	08008c0b 	.word	0x08008c0b
 8008aa0:	08008c43 	.word	0x08008c43
 8008aa4:	08008c67 	.word	0x08008c67
 8008aa8:	20004b68 	.word	0x20004b68

08008aac <stdio_exit_handler>:
 8008aac:	4a02      	ldr	r2, [pc, #8]	@ (8008ab8 <stdio_exit_handler+0xc>)
 8008aae:	4903      	ldr	r1, [pc, #12]	@ (8008abc <stdio_exit_handler+0x10>)
 8008ab0:	4803      	ldr	r0, [pc, #12]	@ (8008ac0 <stdio_exit_handler+0x14>)
 8008ab2:	f000 b869 	b.w	8008b88 <_fwalk_sglue>
 8008ab6:	bf00      	nop
 8008ab8:	20000010 	.word	0x20000010
 8008abc:	080096c9 	.word	0x080096c9
 8008ac0:	20000020 	.word	0x20000020

08008ac4 <cleanup_stdio>:
 8008ac4:	6841      	ldr	r1, [r0, #4]
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <cleanup_stdio+0x34>)
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	b510      	push	{r4, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	d001      	beq.n	8008ad4 <cleanup_stdio+0x10>
 8008ad0:	f000 fdfa 	bl	80096c8 <_fflush_r>
 8008ad4:	68a1      	ldr	r1, [r4, #8]
 8008ad6:	4b09      	ldr	r3, [pc, #36]	@ (8008afc <cleanup_stdio+0x38>)
 8008ad8:	4299      	cmp	r1, r3
 8008ada:	d002      	beq.n	8008ae2 <cleanup_stdio+0x1e>
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fdf3 	bl	80096c8 <_fflush_r>
 8008ae2:	68e1      	ldr	r1, [r4, #12]
 8008ae4:	4b06      	ldr	r3, [pc, #24]	@ (8008b00 <cleanup_stdio+0x3c>)
 8008ae6:	4299      	cmp	r1, r3
 8008ae8:	d004      	beq.n	8008af4 <cleanup_stdio+0x30>
 8008aea:	4620      	mov	r0, r4
 8008aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af0:	f000 bdea 	b.w	80096c8 <_fflush_r>
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	bf00      	nop
 8008af8:	20004b68 	.word	0x20004b68
 8008afc:	20004bd0 	.word	0x20004bd0
 8008b00:	20004c38 	.word	0x20004c38

08008b04 <global_stdio_init.part.0>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <global_stdio_init.part.0+0x30>)
 8008b08:	4c0b      	ldr	r4, [pc, #44]	@ (8008b38 <global_stdio_init.part.0+0x34>)
 8008b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b3c <global_stdio_init.part.0+0x38>)
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	2200      	movs	r2, #0
 8008b12:	2104      	movs	r1, #4
 8008b14:	f7ff ff94 	bl	8008a40 <std>
 8008b18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	2109      	movs	r1, #9
 8008b20:	f7ff ff8e 	bl	8008a40 <std>
 8008b24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b28:	2202      	movs	r2, #2
 8008b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2e:	2112      	movs	r1, #18
 8008b30:	f7ff bf86 	b.w	8008a40 <std>
 8008b34:	20004ca0 	.word	0x20004ca0
 8008b38:	20004b68 	.word	0x20004b68
 8008b3c:	08008aad 	.word	0x08008aad

08008b40 <__sfp_lock_acquire>:
 8008b40:	4801      	ldr	r0, [pc, #4]	@ (8008b48 <__sfp_lock_acquire+0x8>)
 8008b42:	f000 b964 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 8008b46:	bf00      	nop
 8008b48:	20004ca9 	.word	0x20004ca9

08008b4c <__sfp_lock_release>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	@ (8008b54 <__sfp_lock_release+0x8>)
 8008b4e:	f000 b95f 	b.w	8008e10 <__retarget_lock_release_recursive>
 8008b52:	bf00      	nop
 8008b54:	20004ca9 	.word	0x20004ca9

08008b58 <__sinit>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	f7ff fff0 	bl	8008b40 <__sfp_lock_acquire>
 8008b60:	6a23      	ldr	r3, [r4, #32]
 8008b62:	b11b      	cbz	r3, 8008b6c <__sinit+0x14>
 8008b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b68:	f7ff bff0 	b.w	8008b4c <__sfp_lock_release>
 8008b6c:	4b04      	ldr	r3, [pc, #16]	@ (8008b80 <__sinit+0x28>)
 8008b6e:	6223      	str	r3, [r4, #32]
 8008b70:	4b04      	ldr	r3, [pc, #16]	@ (8008b84 <__sinit+0x2c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1f5      	bne.n	8008b64 <__sinit+0xc>
 8008b78:	f7ff ffc4 	bl	8008b04 <global_stdio_init.part.0>
 8008b7c:	e7f2      	b.n	8008b64 <__sinit+0xc>
 8008b7e:	bf00      	nop
 8008b80:	08008ac5 	.word	0x08008ac5
 8008b84:	20004ca0 	.word	0x20004ca0

08008b88 <_fwalk_sglue>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	4688      	mov	r8, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	2600      	movs	r6, #0
 8008b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b98:	f1b9 0901 	subs.w	r9, r9, #1
 8008b9c:	d505      	bpl.n	8008baa <_fwalk_sglue+0x22>
 8008b9e:	6824      	ldr	r4, [r4, #0]
 8008ba0:	2c00      	cmp	r4, #0
 8008ba2:	d1f7      	bne.n	8008b94 <_fwalk_sglue+0xc>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d907      	bls.n	8008bc0 <_fwalk_sglue+0x38>
 8008bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	d003      	beq.n	8008bc0 <_fwalk_sglue+0x38>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4638      	mov	r0, r7
 8008bbc:	47c0      	blx	r8
 8008bbe:	4306      	orrs	r6, r0
 8008bc0:	3568      	adds	r5, #104	@ 0x68
 8008bc2:	e7e9      	b.n	8008b98 <_fwalk_sglue+0x10>

08008bc4 <iprintf>:
 8008bc4:	b40f      	push	{r0, r1, r2, r3}
 8008bc6:	b507      	push	{r0, r1, r2, lr}
 8008bc8:	4906      	ldr	r1, [pc, #24]	@ (8008be4 <iprintf+0x20>)
 8008bca:	ab04      	add	r3, sp, #16
 8008bcc:	6808      	ldr	r0, [r1, #0]
 8008bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd2:	6881      	ldr	r1, [r0, #8]
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	f000 fa4d 	bl	8009074 <_vfiprintf_r>
 8008bda:	b003      	add	sp, #12
 8008bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be0:	b004      	add	sp, #16
 8008be2:	4770      	bx	lr
 8008be4:	2000001c 	.word	0x2000001c

08008be8 <__sread>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	460c      	mov	r4, r1
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	f000 f8be 	bl	8008d70 <_read_r>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	bfab      	itete	ge
 8008bf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008bfc:	181b      	addge	r3, r3, r0
 8008bfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c02:	bfac      	ite	ge
 8008c04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c06:	81a3      	strhlt	r3, [r4, #12]
 8008c08:	bd10      	pop	{r4, pc}

08008c0a <__swrite>:
 8008c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0e:	461f      	mov	r7, r3
 8008c10:	898b      	ldrh	r3, [r1, #12]
 8008c12:	05db      	lsls	r3, r3, #23
 8008c14:	4605      	mov	r5, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4616      	mov	r6, r2
 8008c1a:	d505      	bpl.n	8008c28 <__swrite+0x1e>
 8008c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c20:	2302      	movs	r3, #2
 8008c22:	2200      	movs	r2, #0
 8008c24:	f000 f892 	bl	8008d4c <_lseek_r>
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	4632      	mov	r2, r6
 8008c36:	463b      	mov	r3, r7
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	f000 b8a9 	b.w	8008d94 <_write_r>

08008c42 <__sseek>:
 8008c42:	b510      	push	{r4, lr}
 8008c44:	460c      	mov	r4, r1
 8008c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4a:	f000 f87f 	bl	8008d4c <_lseek_r>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	bf15      	itete	ne
 8008c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c5e:	81a3      	strheq	r3, [r4, #12]
 8008c60:	bf18      	it	ne
 8008c62:	81a3      	strhne	r3, [r4, #12]
 8008c64:	bd10      	pop	{r4, pc}

08008c66 <__sclose>:
 8008c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6a:	f000 b809 	b.w	8008c80 <_close_r>

08008c6e <memset>:
 8008c6e:	4402      	add	r2, r0
 8008c70:	4603      	mov	r3, r0
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d100      	bne.n	8008c78 <memset+0xa>
 8008c76:	4770      	bx	lr
 8008c78:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7c:	e7f9      	b.n	8008c72 <memset+0x4>
	...

08008c80 <_close_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d06      	ldr	r5, [pc, #24]	@ (8008c9c <_close_r+0x1c>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	f7f8 fd31 	bl	80016f2 <_close>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_close_r+0x1a>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_close_r+0x1a>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	20004ca4 	.word	0x20004ca4

08008ca0 <_reclaim_reent>:
 8008ca0:	4b29      	ldr	r3, [pc, #164]	@ (8008d48 <_reclaim_reent+0xa8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	b570      	push	{r4, r5, r6, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	d04b      	beq.n	8008d44 <_reclaim_reent+0xa4>
 8008cac:	69c3      	ldr	r3, [r0, #28]
 8008cae:	b1ab      	cbz	r3, 8008cdc <_reclaim_reent+0x3c>
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	b16b      	cbz	r3, 8008cd0 <_reclaim_reent+0x30>
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	69e3      	ldr	r3, [r4, #28]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	5959      	ldr	r1, [r3, r5]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d13b      	bne.n	8008d38 <_reclaim_reent+0x98>
 8008cc0:	3504      	adds	r5, #4
 8008cc2:	2d80      	cmp	r5, #128	@ 0x80
 8008cc4:	d1f7      	bne.n	8008cb6 <_reclaim_reent+0x16>
 8008cc6:	69e3      	ldr	r3, [r4, #28]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	68d9      	ldr	r1, [r3, #12]
 8008ccc:	f000 f8b0 	bl	8008e30 <_free_r>
 8008cd0:	69e3      	ldr	r3, [r4, #28]
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	b111      	cbz	r1, 8008cdc <_reclaim_reent+0x3c>
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 f8aa 	bl	8008e30 <_free_r>
 8008cdc:	6961      	ldr	r1, [r4, #20]
 8008cde:	b111      	cbz	r1, 8008ce6 <_reclaim_reent+0x46>
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 f8a5 	bl	8008e30 <_free_r>
 8008ce6:	69e1      	ldr	r1, [r4, #28]
 8008ce8:	b111      	cbz	r1, 8008cf0 <_reclaim_reent+0x50>
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f8a0 	bl	8008e30 <_free_r>
 8008cf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008cf2:	b111      	cbz	r1, 8008cfa <_reclaim_reent+0x5a>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 f89b 	bl	8008e30 <_free_r>
 8008cfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cfc:	b111      	cbz	r1, 8008d04 <_reclaim_reent+0x64>
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 f896 	bl	8008e30 <_free_r>
 8008d04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d06:	b111      	cbz	r1, 8008d0e <_reclaim_reent+0x6e>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f891 	bl	8008e30 <_free_r>
 8008d0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008d10:	b111      	cbz	r1, 8008d18 <_reclaim_reent+0x78>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f88c 	bl	8008e30 <_free_r>
 8008d18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008d1a:	b111      	cbz	r1, 8008d22 <_reclaim_reent+0x82>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 f887 	bl	8008e30 <_free_r>
 8008d22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008d24:	b111      	cbz	r1, 8008d2c <_reclaim_reent+0x8c>
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 f882 	bl	8008e30 <_free_r>
 8008d2c:	6a23      	ldr	r3, [r4, #32]
 8008d2e:	b14b      	cbz	r3, 8008d44 <_reclaim_reent+0xa4>
 8008d30:	4620      	mov	r0, r4
 8008d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d36:	4718      	bx	r3
 8008d38:	680e      	ldr	r6, [r1, #0]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f878 	bl	8008e30 <_free_r>
 8008d40:	4631      	mov	r1, r6
 8008d42:	e7bb      	b.n	8008cbc <_reclaim_reent+0x1c>
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	bf00      	nop
 8008d48:	2000001c 	.word	0x2000001c

08008d4c <_lseek_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	@ (8008d6c <_lseek_r+0x20>)
 8008d50:	4604      	mov	r4, r0
 8008d52:	4608      	mov	r0, r1
 8008d54:	4611      	mov	r1, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7f8 fcf0 	bl	8001740 <_lseek>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_lseek_r+0x1e>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_lseek_r+0x1e>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20004ca4 	.word	0x20004ca4

08008d70 <_read_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	@ (8008d90 <_read_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f8 fc9a 	bl	80016b8 <_read>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_read_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_read_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20004ca4 	.word	0x20004ca4

08008d94 <_write_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	@ (8008db4 <_write_r+0x20>)
 8008d98:	4604      	mov	r4, r0
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7f8 f8e9 	bl	8000f7a <_write>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_write_r+0x1e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_write_r+0x1e>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	20004ca4 	.word	0x20004ca4

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	@ (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000001c 	.word	0x2000001c

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f000 fdc6 	bl	8009968 <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	08009a78 	.word	0x08009a78
 8008e00:	08009a78 	.word	0x08009a78
 8008e04:	08009a78 	.word	0x08009a78
 8008e08:	08009a7c 	.word	0x08009a7c

08008e0c <__retarget_lock_init_recursive>:
 8008e0c:	4770      	bx	lr

08008e0e <__retarget_lock_acquire_recursive>:
 8008e0e:	4770      	bx	lr

08008e10 <__retarget_lock_release_recursive>:
 8008e10:	4770      	bx	lr

08008e12 <memcpy>:
 8008e12:	440a      	add	r2, r1
 8008e14:	4291      	cmp	r1, r2
 8008e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e1a:	d100      	bne.n	8008e1e <memcpy+0xc>
 8008e1c:	4770      	bx	lr
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e28:	4291      	cmp	r1, r2
 8008e2a:	d1f9      	bne.n	8008e20 <memcpy+0xe>
 8008e2c:	bd10      	pop	{r4, pc}
	...

08008e30 <_free_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4605      	mov	r5, r0
 8008e34:	2900      	cmp	r1, #0
 8008e36:	d041      	beq.n	8008ebc <_free_r+0x8c>
 8008e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e3c:	1f0c      	subs	r4, r1, #4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bfb8      	it	lt
 8008e42:	18e4      	addlt	r4, r4, r3
 8008e44:	f000 f8e0 	bl	8009008 <__malloc_lock>
 8008e48:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec0 <_free_r+0x90>)
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	b933      	cbnz	r3, 8008e5c <_free_r+0x2c>
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	6014      	str	r4, [r2, #0]
 8008e52:	4628      	mov	r0, r5
 8008e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e58:	f000 b8dc 	b.w	8009014 <__malloc_unlock>
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	d908      	bls.n	8008e72 <_free_r+0x42>
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	1821      	adds	r1, r4, r0
 8008e64:	428b      	cmp	r3, r1
 8008e66:	bf01      	itttt	eq
 8008e68:	6819      	ldreq	r1, [r3, #0]
 8008e6a:	685b      	ldreq	r3, [r3, #4]
 8008e6c:	1809      	addeq	r1, r1, r0
 8008e6e:	6021      	streq	r1, [r4, #0]
 8008e70:	e7ed      	b.n	8008e4e <_free_r+0x1e>
 8008e72:	461a      	mov	r2, r3
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	b10b      	cbz	r3, 8008e7c <_free_r+0x4c>
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d9fa      	bls.n	8008e72 <_free_r+0x42>
 8008e7c:	6811      	ldr	r1, [r2, #0]
 8008e7e:	1850      	adds	r0, r2, r1
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d10b      	bne.n	8008e9c <_free_r+0x6c>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	4401      	add	r1, r0
 8008e88:	1850      	adds	r0, r2, r1
 8008e8a:	4283      	cmp	r3, r0
 8008e8c:	6011      	str	r1, [r2, #0]
 8008e8e:	d1e0      	bne.n	8008e52 <_free_r+0x22>
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	6053      	str	r3, [r2, #4]
 8008e96:	4408      	add	r0, r1
 8008e98:	6010      	str	r0, [r2, #0]
 8008e9a:	e7da      	b.n	8008e52 <_free_r+0x22>
 8008e9c:	d902      	bls.n	8008ea4 <_free_r+0x74>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	e7d6      	b.n	8008e52 <_free_r+0x22>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	1821      	adds	r1, r4, r0
 8008ea8:	428b      	cmp	r3, r1
 8008eaa:	bf04      	itt	eq
 8008eac:	6819      	ldreq	r1, [r3, #0]
 8008eae:	685b      	ldreq	r3, [r3, #4]
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	bf04      	itt	eq
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	6054      	str	r4, [r2, #4]
 8008eba:	e7ca      	b.n	8008e52 <_free_r+0x22>
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20004cb0 	.word	0x20004cb0

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f04 <sbrk_aligned+0x40>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f000 fcb6 	bl	8009840 <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 fcb1 	bl	8009840 <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d103      	bne.n	8008eea <sbrk_aligned+0x26>
 8008ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	1cc4      	adds	r4, r0, #3
 8008eec:	f024 0403 	bic.w	r4, r4, #3
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	d0f8      	beq.n	8008ee6 <sbrk_aligned+0x22>
 8008ef4:	1a21      	subs	r1, r4, r0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 fca2 	bl	8009840 <_sbrk_r>
 8008efc:	3001      	adds	r0, #1
 8008efe:	d1f2      	bne.n	8008ee6 <sbrk_aligned+0x22>
 8008f00:	e7ef      	b.n	8008ee2 <sbrk_aligned+0x1e>
 8008f02:	bf00      	nop
 8008f04:	20004cac 	.word	0x20004cac

08008f08 <_malloc_r>:
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	1ccd      	adds	r5, r1, #3
 8008f0e:	f025 0503 	bic.w	r5, r5, #3
 8008f12:	3508      	adds	r5, #8
 8008f14:	2d0c      	cmp	r5, #12
 8008f16:	bf38      	it	cc
 8008f18:	250c      	movcc	r5, #12
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	db01      	blt.n	8008f24 <_malloc_r+0x1c>
 8008f20:	42a9      	cmp	r1, r5
 8008f22:	d904      	bls.n	8008f2e <_malloc_r+0x26>
 8008f24:	230c      	movs	r3, #12
 8008f26:	6033      	str	r3, [r6, #0]
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009004 <_malloc_r+0xfc>
 8008f32:	f000 f869 	bl	8009008 <__malloc_lock>
 8008f36:	f8d8 3000 	ldr.w	r3, [r8]
 8008f3a:	461c      	mov	r4, r3
 8008f3c:	bb44      	cbnz	r4, 8008f90 <_malloc_r+0x88>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7ff ffbf 	bl	8008ec4 <sbrk_aligned>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	4604      	mov	r4, r0
 8008f4a:	d158      	bne.n	8008ffe <_malloc_r+0xf6>
 8008f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f50:	4627      	mov	r7, r4
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d143      	bne.n	8008fde <_malloc_r+0xd6>
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d04b      	beq.n	8008ff2 <_malloc_r+0xea>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	eb04 0903 	add.w	r9, r4, r3
 8008f64:	f000 fc6c 	bl	8009840 <_sbrk_r>
 8008f68:	4581      	cmp	r9, r0
 8008f6a:	d142      	bne.n	8008ff2 <_malloc_r+0xea>
 8008f6c:	6821      	ldr	r1, [r4, #0]
 8008f6e:	1a6d      	subs	r5, r5, r1
 8008f70:	4629      	mov	r1, r5
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffa6 	bl	8008ec4 <sbrk_aligned>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d03a      	beq.n	8008ff2 <_malloc_r+0xea>
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	442b      	add	r3, r5
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	f8d8 3000 	ldr.w	r3, [r8]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	bb62      	cbnz	r2, 8008fe4 <_malloc_r+0xdc>
 8008f8a:	f8c8 7000 	str.w	r7, [r8]
 8008f8e:	e00f      	b.n	8008fb0 <_malloc_r+0xa8>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	1b52      	subs	r2, r2, r5
 8008f94:	d420      	bmi.n	8008fd8 <_malloc_r+0xd0>
 8008f96:	2a0b      	cmp	r2, #11
 8008f98:	d917      	bls.n	8008fca <_malloc_r+0xc2>
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	6025      	str	r5, [r4, #0]
 8008fa0:	bf18      	it	ne
 8008fa2:	6059      	strne	r1, [r3, #4]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	bf08      	it	eq
 8008fa8:	f8c8 1000 	streq.w	r1, [r8]
 8008fac:	5162      	str	r2, [r4, r5]
 8008fae:	604b      	str	r3, [r1, #4]
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f82f 	bl	8009014 <__malloc_unlock>
 8008fb6:	f104 000b 	add.w	r0, r4, #11
 8008fba:	1d23      	adds	r3, r4, #4
 8008fbc:	f020 0007 	bic.w	r0, r0, #7
 8008fc0:	1ac2      	subs	r2, r0, r3
 8008fc2:	bf1c      	itt	ne
 8008fc4:	1a1b      	subne	r3, r3, r0
 8008fc6:	50a3      	strne	r3, [r4, r2]
 8008fc8:	e7af      	b.n	8008f2a <_malloc_r+0x22>
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	bf0c      	ite	eq
 8008fd0:	f8c8 2000 	streq.w	r2, [r8]
 8008fd4:	605a      	strne	r2, [r3, #4]
 8008fd6:	e7eb      	b.n	8008fb0 <_malloc_r+0xa8>
 8008fd8:	4623      	mov	r3, r4
 8008fda:	6864      	ldr	r4, [r4, #4]
 8008fdc:	e7ae      	b.n	8008f3c <_malloc_r+0x34>
 8008fde:	463c      	mov	r4, r7
 8008fe0:	687f      	ldr	r7, [r7, #4]
 8008fe2:	e7b6      	b.n	8008f52 <_malloc_r+0x4a>
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d1fb      	bne.n	8008fe4 <_malloc_r+0xdc>
 8008fec:	2300      	movs	r3, #0
 8008fee:	6053      	str	r3, [r2, #4]
 8008ff0:	e7de      	b.n	8008fb0 <_malloc_r+0xa8>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f80c 	bl	8009014 <__malloc_unlock>
 8008ffc:	e794      	b.n	8008f28 <_malloc_r+0x20>
 8008ffe:	6005      	str	r5, [r0, #0]
 8009000:	e7d6      	b.n	8008fb0 <_malloc_r+0xa8>
 8009002:	bf00      	nop
 8009004:	20004cb0 	.word	0x20004cb0

08009008 <__malloc_lock>:
 8009008:	4801      	ldr	r0, [pc, #4]	@ (8009010 <__malloc_lock+0x8>)
 800900a:	f7ff bf00 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 800900e:	bf00      	nop
 8009010:	20004ca8 	.word	0x20004ca8

08009014 <__malloc_unlock>:
 8009014:	4801      	ldr	r0, [pc, #4]	@ (800901c <__malloc_unlock+0x8>)
 8009016:	f7ff befb 	b.w	8008e10 <__retarget_lock_release_recursive>
 800901a:	bf00      	nop
 800901c:	20004ca8 	.word	0x20004ca8

08009020 <__sfputc_r>:
 8009020:	6893      	ldr	r3, [r2, #8]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	b410      	push	{r4}
 8009028:	6093      	str	r3, [r2, #8]
 800902a:	da08      	bge.n	800903e <__sfputc_r+0x1e>
 800902c:	6994      	ldr	r4, [r2, #24]
 800902e:	42a3      	cmp	r3, r4
 8009030:	db01      	blt.n	8009036 <__sfputc_r+0x16>
 8009032:	290a      	cmp	r1, #10
 8009034:	d103      	bne.n	800903e <__sfputc_r+0x1e>
 8009036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903a:	f000 bb6d 	b.w	8009718 <__swbuf_r>
 800903e:	6813      	ldr	r3, [r2, #0]
 8009040:	1c58      	adds	r0, r3, #1
 8009042:	6010      	str	r0, [r2, #0]
 8009044:	7019      	strb	r1, [r3, #0]
 8009046:	4608      	mov	r0, r1
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904c:	4770      	bx	lr

0800904e <__sfputs_r>:
 800904e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	4614      	mov	r4, r2
 8009056:	18d5      	adds	r5, r2, r3
 8009058:	42ac      	cmp	r4, r5
 800905a:	d101      	bne.n	8009060 <__sfputs_r+0x12>
 800905c:	2000      	movs	r0, #0
 800905e:	e007      	b.n	8009070 <__sfputs_r+0x22>
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	463a      	mov	r2, r7
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ffda 	bl	8009020 <__sfputc_r>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d1f3      	bne.n	8009058 <__sfputs_r+0xa>
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009074 <_vfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	460d      	mov	r5, r1
 800907a:	b09d      	sub	sp, #116	@ 0x74
 800907c:	4614      	mov	r4, r2
 800907e:	4698      	mov	r8, r3
 8009080:	4606      	mov	r6, r0
 8009082:	b118      	cbz	r0, 800908c <_vfiprintf_r+0x18>
 8009084:	6a03      	ldr	r3, [r0, #32]
 8009086:	b90b      	cbnz	r3, 800908c <_vfiprintf_r+0x18>
 8009088:	f7ff fd66 	bl	8008b58 <__sinit>
 800908c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800909a:	f7ff feb8 	bl	8008e0e <__retarget_lock_acquire_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	071b      	lsls	r3, r3, #28
 80090a2:	d501      	bpl.n	80090a8 <_vfiprintf_r+0x34>
 80090a4:	692b      	ldr	r3, [r5, #16]
 80090a6:	b99b      	cbnz	r3, 80090d0 <_vfiprintf_r+0x5c>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 fb72 	bl	8009794 <__swsetup_r>
 80090b0:	b170      	cbz	r0, 80090d0 <_vfiprintf_r+0x5c>
 80090b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090b4:	07dc      	lsls	r4, r3, #31
 80090b6:	d504      	bpl.n	80090c2 <_vfiprintf_r+0x4e>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	b01d      	add	sp, #116	@ 0x74
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	0598      	lsls	r0, r3, #22
 80090c6:	d4f7      	bmi.n	80090b8 <_vfiprintf_r+0x44>
 80090c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ca:	f7ff fea1 	bl	8008e10 <__retarget_lock_release_recursive>
 80090ce:	e7f3      	b.n	80090b8 <_vfiprintf_r+0x44>
 80090d0:	2300      	movs	r3, #0
 80090d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d4:	2320      	movs	r3, #32
 80090d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090da:	f8cd 800c 	str.w	r8, [sp, #12]
 80090de:	2330      	movs	r3, #48	@ 0x30
 80090e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009290 <_vfiprintf_r+0x21c>
 80090e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090e8:	f04f 0901 	mov.w	r9, #1
 80090ec:	4623      	mov	r3, r4
 80090ee:	469a      	mov	sl, r3
 80090f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f4:	b10a      	cbz	r2, 80090fa <_vfiprintf_r+0x86>
 80090f6:	2a25      	cmp	r2, #37	@ 0x25
 80090f8:	d1f9      	bne.n	80090ee <_vfiprintf_r+0x7a>
 80090fa:	ebba 0b04 	subs.w	fp, sl, r4
 80090fe:	d00b      	beq.n	8009118 <_vfiprintf_r+0xa4>
 8009100:	465b      	mov	r3, fp
 8009102:	4622      	mov	r2, r4
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffa1 	bl	800904e <__sfputs_r>
 800910c:	3001      	adds	r0, #1
 800910e:	f000 80a7 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 8009112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009114:	445a      	add	r2, fp
 8009116:	9209      	str	r2, [sp, #36]	@ 0x24
 8009118:	f89a 3000 	ldrb.w	r3, [sl]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 809f 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 8009122:	2300      	movs	r3, #0
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800912c:	f10a 0a01 	add.w	sl, sl, #1
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009138:	931a      	str	r3, [sp, #104]	@ 0x68
 800913a:	4654      	mov	r4, sl
 800913c:	2205      	movs	r2, #5
 800913e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009142:	4853      	ldr	r0, [pc, #332]	@ (8009290 <_vfiprintf_r+0x21c>)
 8009144:	f7f7 f864 	bl	8000210 <memchr>
 8009148:	9a04      	ldr	r2, [sp, #16]
 800914a:	b9d8      	cbnz	r0, 8009184 <_vfiprintf_r+0x110>
 800914c:	06d1      	lsls	r1, r2, #27
 800914e:	bf44      	itt	mi
 8009150:	2320      	movmi	r3, #32
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009156:	0713      	lsls	r3, r2, #28
 8009158:	bf44      	itt	mi
 800915a:	232b      	movmi	r3, #43	@ 0x2b
 800915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009160:	f89a 3000 	ldrb.w	r3, [sl]
 8009164:	2b2a      	cmp	r3, #42	@ 0x2a
 8009166:	d015      	beq.n	8009194 <_vfiprintf_r+0x120>
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	4654      	mov	r4, sl
 800916c:	2000      	movs	r0, #0
 800916e:	f04f 0c0a 	mov.w	ip, #10
 8009172:	4621      	mov	r1, r4
 8009174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009178:	3b30      	subs	r3, #48	@ 0x30
 800917a:	2b09      	cmp	r3, #9
 800917c:	d94b      	bls.n	8009216 <_vfiprintf_r+0x1a2>
 800917e:	b1b0      	cbz	r0, 80091ae <_vfiprintf_r+0x13a>
 8009180:	9207      	str	r2, [sp, #28]
 8009182:	e014      	b.n	80091ae <_vfiprintf_r+0x13a>
 8009184:	eba0 0308 	sub.w	r3, r0, r8
 8009188:	fa09 f303 	lsl.w	r3, r9, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	46a2      	mov	sl, r4
 8009192:	e7d2      	b.n	800913a <_vfiprintf_r+0xc6>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	1d19      	adds	r1, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9103      	str	r1, [sp, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	bfbb      	ittet	lt
 80091a0:	425b      	neglt	r3, r3
 80091a2:	f042 0202 	orrlt.w	r2, r2, #2
 80091a6:	9307      	strge	r3, [sp, #28]
 80091a8:	9307      	strlt	r3, [sp, #28]
 80091aa:	bfb8      	it	lt
 80091ac:	9204      	strlt	r2, [sp, #16]
 80091ae:	7823      	ldrb	r3, [r4, #0]
 80091b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80091b2:	d10a      	bne.n	80091ca <_vfiprintf_r+0x156>
 80091b4:	7863      	ldrb	r3, [r4, #1]
 80091b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b8:	d132      	bne.n	8009220 <_vfiprintf_r+0x1ac>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d1a      	adds	r2, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9203      	str	r2, [sp, #12]
 80091c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091c6:	3402      	adds	r4, #2
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092a0 <_vfiprintf_r+0x22c>
 80091ce:	7821      	ldrb	r1, [r4, #0]
 80091d0:	2203      	movs	r2, #3
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7f7 f81c 	bl	8000210 <memchr>
 80091d8:	b138      	cbz	r0, 80091ea <_vfiprintf_r+0x176>
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	eba0 000a 	sub.w	r0, r0, sl
 80091e0:	2240      	movs	r2, #64	@ 0x40
 80091e2:	4082      	lsls	r2, r0
 80091e4:	4313      	orrs	r3, r2
 80091e6:	3401      	adds	r4, #1
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ee:	4829      	ldr	r0, [pc, #164]	@ (8009294 <_vfiprintf_r+0x220>)
 80091f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091f4:	2206      	movs	r2, #6
 80091f6:	f7f7 f80b 	bl	8000210 <memchr>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d03f      	beq.n	800927e <_vfiprintf_r+0x20a>
 80091fe:	4b26      	ldr	r3, [pc, #152]	@ (8009298 <_vfiprintf_r+0x224>)
 8009200:	bb1b      	cbnz	r3, 800924a <_vfiprintf_r+0x1d6>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	3307      	adds	r3, #7
 8009206:	f023 0307 	bic.w	r3, r3, #7
 800920a:	3308      	adds	r3, #8
 800920c:	9303      	str	r3, [sp, #12]
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	443b      	add	r3, r7
 8009212:	9309      	str	r3, [sp, #36]	@ 0x24
 8009214:	e76a      	b.n	80090ec <_vfiprintf_r+0x78>
 8009216:	fb0c 3202 	mla	r2, ip, r2, r3
 800921a:	460c      	mov	r4, r1
 800921c:	2001      	movs	r0, #1
 800921e:	e7a8      	b.n	8009172 <_vfiprintf_r+0xfe>
 8009220:	2300      	movs	r3, #0
 8009222:	3401      	adds	r4, #1
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	4619      	mov	r1, r3
 8009228:	f04f 0c0a 	mov.w	ip, #10
 800922c:	4620      	mov	r0, r4
 800922e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009232:	3a30      	subs	r2, #48	@ 0x30
 8009234:	2a09      	cmp	r2, #9
 8009236:	d903      	bls.n	8009240 <_vfiprintf_r+0x1cc>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0c6      	beq.n	80091ca <_vfiprintf_r+0x156>
 800923c:	9105      	str	r1, [sp, #20]
 800923e:	e7c4      	b.n	80091ca <_vfiprintf_r+0x156>
 8009240:	fb0c 2101 	mla	r1, ip, r1, r2
 8009244:	4604      	mov	r4, r0
 8009246:	2301      	movs	r3, #1
 8009248:	e7f0      	b.n	800922c <_vfiprintf_r+0x1b8>
 800924a:	ab03      	add	r3, sp, #12
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	462a      	mov	r2, r5
 8009250:	4b12      	ldr	r3, [pc, #72]	@ (800929c <_vfiprintf_r+0x228>)
 8009252:	a904      	add	r1, sp, #16
 8009254:	4630      	mov	r0, r6
 8009256:	f3af 8000 	nop.w
 800925a:	4607      	mov	r7, r0
 800925c:	1c78      	adds	r0, r7, #1
 800925e:	d1d6      	bne.n	800920e <_vfiprintf_r+0x19a>
 8009260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009262:	07d9      	lsls	r1, r3, #31
 8009264:	d405      	bmi.n	8009272 <_vfiprintf_r+0x1fe>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	059a      	lsls	r2, r3, #22
 800926a:	d402      	bmi.n	8009272 <_vfiprintf_r+0x1fe>
 800926c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800926e:	f7ff fdcf 	bl	8008e10 <__retarget_lock_release_recursive>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	065b      	lsls	r3, r3, #25
 8009276:	f53f af1f 	bmi.w	80090b8 <_vfiprintf_r+0x44>
 800927a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800927c:	e71e      	b.n	80090bc <_vfiprintf_r+0x48>
 800927e:	ab03      	add	r3, sp, #12
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	462a      	mov	r2, r5
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <_vfiprintf_r+0x228>)
 8009286:	a904      	add	r1, sp, #16
 8009288:	4630      	mov	r0, r6
 800928a:	f000 f879 	bl	8009380 <_printf_i>
 800928e:	e7e4      	b.n	800925a <_vfiprintf_r+0x1e6>
 8009290:	08009a3c 	.word	0x08009a3c
 8009294:	08009a46 	.word	0x08009a46
 8009298:	00000000 	.word	0x00000000
 800929c:	0800904f 	.word	0x0800904f
 80092a0:	08009a42 	.word	0x08009a42

080092a4 <_printf_common>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	4616      	mov	r6, r2
 80092aa:	4698      	mov	r8, r3
 80092ac:	688a      	ldr	r2, [r1, #8]
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	bfb8      	it	lt
 80092b8:	4613      	movlt	r3, r2
 80092ba:	6033      	str	r3, [r6, #0]
 80092bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092c0:	4607      	mov	r7, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	b10a      	cbz	r2, 80092ca <_printf_common+0x26>
 80092c6:	3301      	adds	r3, #1
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0699      	lsls	r1, r3, #26
 80092ce:	bf42      	ittt	mi
 80092d0:	6833      	ldrmi	r3, [r6, #0]
 80092d2:	3302      	addmi	r3, #2
 80092d4:	6033      	strmi	r3, [r6, #0]
 80092d6:	6825      	ldr	r5, [r4, #0]
 80092d8:	f015 0506 	ands.w	r5, r5, #6
 80092dc:	d106      	bne.n	80092ec <_printf_common+0x48>
 80092de:	f104 0a19 	add.w	sl, r4, #25
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	6832      	ldr	r2, [r6, #0]
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	dc26      	bgt.n	800933a <_printf_common+0x96>
 80092ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	3b00      	subs	r3, #0
 80092f4:	bf18      	it	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	0692      	lsls	r2, r2, #26
 80092fa:	d42b      	bmi.n	8009354 <_printf_common+0xb0>
 80092fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009300:	4641      	mov	r1, r8
 8009302:	4638      	mov	r0, r7
 8009304:	47c8      	blx	r9
 8009306:	3001      	adds	r0, #1
 8009308:	d01e      	beq.n	8009348 <_printf_common+0xa4>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	6922      	ldr	r2, [r4, #16]
 800930e:	f003 0306 	and.w	r3, r3, #6
 8009312:	2b04      	cmp	r3, #4
 8009314:	bf02      	ittt	eq
 8009316:	68e5      	ldreq	r5, [r4, #12]
 8009318:	6833      	ldreq	r3, [r6, #0]
 800931a:	1aed      	subeq	r5, r5, r3
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	bf0c      	ite	eq
 8009320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009324:	2500      	movne	r5, #0
 8009326:	4293      	cmp	r3, r2
 8009328:	bfc4      	itt	gt
 800932a:	1a9b      	subgt	r3, r3, r2
 800932c:	18ed      	addgt	r5, r5, r3
 800932e:	2600      	movs	r6, #0
 8009330:	341a      	adds	r4, #26
 8009332:	42b5      	cmp	r5, r6
 8009334:	d11a      	bne.n	800936c <_printf_common+0xc8>
 8009336:	2000      	movs	r0, #0
 8009338:	e008      	b.n	800934c <_printf_common+0xa8>
 800933a:	2301      	movs	r3, #1
 800933c:	4652      	mov	r2, sl
 800933e:	4641      	mov	r1, r8
 8009340:	4638      	mov	r0, r7
 8009342:	47c8      	blx	r9
 8009344:	3001      	adds	r0, #1
 8009346:	d103      	bne.n	8009350 <_printf_common+0xac>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	e7c6      	b.n	80092e2 <_printf_common+0x3e>
 8009354:	18e1      	adds	r1, r4, r3
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	2030      	movs	r0, #48	@ 0x30
 800935a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800935e:	4422      	add	r2, r4
 8009360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009368:	3302      	adds	r3, #2
 800936a:	e7c7      	b.n	80092fc <_printf_common+0x58>
 800936c:	2301      	movs	r3, #1
 800936e:	4622      	mov	r2, r4
 8009370:	4641      	mov	r1, r8
 8009372:	4638      	mov	r0, r7
 8009374:	47c8      	blx	r9
 8009376:	3001      	adds	r0, #1
 8009378:	d0e6      	beq.n	8009348 <_printf_common+0xa4>
 800937a:	3601      	adds	r6, #1
 800937c:	e7d9      	b.n	8009332 <_printf_common+0x8e>
	...

08009380 <_printf_i>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	7e0f      	ldrb	r7, [r1, #24]
 8009386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009388:	2f78      	cmp	r7, #120	@ 0x78
 800938a:	4691      	mov	r9, r2
 800938c:	4680      	mov	r8, r0
 800938e:	460c      	mov	r4, r1
 8009390:	469a      	mov	sl, r3
 8009392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009396:	d807      	bhi.n	80093a8 <_printf_i+0x28>
 8009398:	2f62      	cmp	r7, #98	@ 0x62
 800939a:	d80a      	bhi.n	80093b2 <_printf_i+0x32>
 800939c:	2f00      	cmp	r7, #0
 800939e:	f000 80d2 	beq.w	8009546 <_printf_i+0x1c6>
 80093a2:	2f58      	cmp	r7, #88	@ 0x58
 80093a4:	f000 80b9 	beq.w	800951a <_printf_i+0x19a>
 80093a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093b0:	e03a      	b.n	8009428 <_printf_i+0xa8>
 80093b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093b6:	2b15      	cmp	r3, #21
 80093b8:	d8f6      	bhi.n	80093a8 <_printf_i+0x28>
 80093ba:	a101      	add	r1, pc, #4	@ (adr r1, 80093c0 <_printf_i+0x40>)
 80093bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093c0:	08009419 	.word	0x08009419
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080093a9 	.word	0x080093a9
 80093cc:	080093a9 	.word	0x080093a9
 80093d0:	080093a9 	.word	0x080093a9
 80093d4:	080093a9 	.word	0x080093a9
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	080093a9 	.word	0x080093a9
 80093e0:	080093a9 	.word	0x080093a9
 80093e4:	080093a9 	.word	0x080093a9
 80093e8:	080093a9 	.word	0x080093a9
 80093ec:	0800952d 	.word	0x0800952d
 80093f0:	08009457 	.word	0x08009457
 80093f4:	080094e7 	.word	0x080094e7
 80093f8:	080093a9 	.word	0x080093a9
 80093fc:	080093a9 	.word	0x080093a9
 8009400:	0800954f 	.word	0x0800954f
 8009404:	080093a9 	.word	0x080093a9
 8009408:	08009457 	.word	0x08009457
 800940c:	080093a9 	.word	0x080093a9
 8009410:	080093a9 	.word	0x080093a9
 8009414:	080094ef 	.word	0x080094ef
 8009418:	6833      	ldr	r3, [r6, #0]
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6032      	str	r2, [r6, #0]
 8009420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009428:	2301      	movs	r3, #1
 800942a:	e09d      	b.n	8009568 <_printf_i+0x1e8>
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	1d19      	adds	r1, r3, #4
 8009432:	6031      	str	r1, [r6, #0]
 8009434:	0606      	lsls	r6, r0, #24
 8009436:	d501      	bpl.n	800943c <_printf_i+0xbc>
 8009438:	681d      	ldr	r5, [r3, #0]
 800943a:	e003      	b.n	8009444 <_printf_i+0xc4>
 800943c:	0645      	lsls	r5, r0, #25
 800943e:	d5fb      	bpl.n	8009438 <_printf_i+0xb8>
 8009440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009444:	2d00      	cmp	r5, #0
 8009446:	da03      	bge.n	8009450 <_printf_i+0xd0>
 8009448:	232d      	movs	r3, #45	@ 0x2d
 800944a:	426d      	negs	r5, r5
 800944c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009450:	4859      	ldr	r0, [pc, #356]	@ (80095b8 <_printf_i+0x238>)
 8009452:	230a      	movs	r3, #10
 8009454:	e011      	b.n	800947a <_printf_i+0xfa>
 8009456:	6821      	ldr	r1, [r4, #0]
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	0608      	lsls	r0, r1, #24
 800945c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009460:	d402      	bmi.n	8009468 <_printf_i+0xe8>
 8009462:	0649      	lsls	r1, r1, #25
 8009464:	bf48      	it	mi
 8009466:	b2ad      	uxthmi	r5, r5
 8009468:	2f6f      	cmp	r7, #111	@ 0x6f
 800946a:	4853      	ldr	r0, [pc, #332]	@ (80095b8 <_printf_i+0x238>)
 800946c:	6033      	str	r3, [r6, #0]
 800946e:	bf14      	ite	ne
 8009470:	230a      	movne	r3, #10
 8009472:	2308      	moveq	r3, #8
 8009474:	2100      	movs	r1, #0
 8009476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800947a:	6866      	ldr	r6, [r4, #4]
 800947c:	60a6      	str	r6, [r4, #8]
 800947e:	2e00      	cmp	r6, #0
 8009480:	bfa2      	ittt	ge
 8009482:	6821      	ldrge	r1, [r4, #0]
 8009484:	f021 0104 	bicge.w	r1, r1, #4
 8009488:	6021      	strge	r1, [r4, #0]
 800948a:	b90d      	cbnz	r5, 8009490 <_printf_i+0x110>
 800948c:	2e00      	cmp	r6, #0
 800948e:	d04b      	beq.n	8009528 <_printf_i+0x1a8>
 8009490:	4616      	mov	r6, r2
 8009492:	fbb5 f1f3 	udiv	r1, r5, r3
 8009496:	fb03 5711 	mls	r7, r3, r1, r5
 800949a:	5dc7      	ldrb	r7, [r0, r7]
 800949c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094a0:	462f      	mov	r7, r5
 80094a2:	42bb      	cmp	r3, r7
 80094a4:	460d      	mov	r5, r1
 80094a6:	d9f4      	bls.n	8009492 <_printf_i+0x112>
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d10b      	bne.n	80094c4 <_printf_i+0x144>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	07df      	lsls	r7, r3, #31
 80094b0:	d508      	bpl.n	80094c4 <_printf_i+0x144>
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	6861      	ldr	r1, [r4, #4]
 80094b6:	4299      	cmp	r1, r3
 80094b8:	bfde      	ittt	le
 80094ba:	2330      	movle	r3, #48	@ 0x30
 80094bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094c4:	1b92      	subs	r2, r2, r6
 80094c6:	6122      	str	r2, [r4, #16]
 80094c8:	f8cd a000 	str.w	sl, [sp]
 80094cc:	464b      	mov	r3, r9
 80094ce:	aa03      	add	r2, sp, #12
 80094d0:	4621      	mov	r1, r4
 80094d2:	4640      	mov	r0, r8
 80094d4:	f7ff fee6 	bl	80092a4 <_printf_common>
 80094d8:	3001      	adds	r0, #1
 80094da:	d14a      	bne.n	8009572 <_printf_i+0x1f2>
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	b004      	add	sp, #16
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	f043 0320 	orr.w	r3, r3, #32
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	4833      	ldr	r0, [pc, #204]	@ (80095bc <_printf_i+0x23c>)
 80094f0:	2778      	movs	r7, #120	@ 0x78
 80094f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	6831      	ldr	r1, [r6, #0]
 80094fa:	061f      	lsls	r7, r3, #24
 80094fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009500:	d402      	bmi.n	8009508 <_printf_i+0x188>
 8009502:	065f      	lsls	r7, r3, #25
 8009504:	bf48      	it	mi
 8009506:	b2ad      	uxthmi	r5, r5
 8009508:	6031      	str	r1, [r6, #0]
 800950a:	07d9      	lsls	r1, r3, #31
 800950c:	bf44      	itt	mi
 800950e:	f043 0320 	orrmi.w	r3, r3, #32
 8009512:	6023      	strmi	r3, [r4, #0]
 8009514:	b11d      	cbz	r5, 800951e <_printf_i+0x19e>
 8009516:	2310      	movs	r3, #16
 8009518:	e7ac      	b.n	8009474 <_printf_i+0xf4>
 800951a:	4827      	ldr	r0, [pc, #156]	@ (80095b8 <_printf_i+0x238>)
 800951c:	e7e9      	b.n	80094f2 <_printf_i+0x172>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	f023 0320 	bic.w	r3, r3, #32
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	e7f6      	b.n	8009516 <_printf_i+0x196>
 8009528:	4616      	mov	r6, r2
 800952a:	e7bd      	b.n	80094a8 <_printf_i+0x128>
 800952c:	6833      	ldr	r3, [r6, #0]
 800952e:	6825      	ldr	r5, [r4, #0]
 8009530:	6961      	ldr	r1, [r4, #20]
 8009532:	1d18      	adds	r0, r3, #4
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	062e      	lsls	r6, r5, #24
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	d501      	bpl.n	8009540 <_printf_i+0x1c0>
 800953c:	6019      	str	r1, [r3, #0]
 800953e:	e002      	b.n	8009546 <_printf_i+0x1c6>
 8009540:	0668      	lsls	r0, r5, #25
 8009542:	d5fb      	bpl.n	800953c <_printf_i+0x1bc>
 8009544:	8019      	strh	r1, [r3, #0]
 8009546:	2300      	movs	r3, #0
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	4616      	mov	r6, r2
 800954c:	e7bc      	b.n	80094c8 <_printf_i+0x148>
 800954e:	6833      	ldr	r3, [r6, #0]
 8009550:	1d1a      	adds	r2, r3, #4
 8009552:	6032      	str	r2, [r6, #0]
 8009554:	681e      	ldr	r6, [r3, #0]
 8009556:	6862      	ldr	r2, [r4, #4]
 8009558:	2100      	movs	r1, #0
 800955a:	4630      	mov	r0, r6
 800955c:	f7f6 fe58 	bl	8000210 <memchr>
 8009560:	b108      	cbz	r0, 8009566 <_printf_i+0x1e6>
 8009562:	1b80      	subs	r0, r0, r6
 8009564:	6060      	str	r0, [r4, #4]
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	2300      	movs	r3, #0
 800956c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009570:	e7aa      	b.n	80094c8 <_printf_i+0x148>
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	4632      	mov	r2, r6
 8009576:	4649      	mov	r1, r9
 8009578:	4640      	mov	r0, r8
 800957a:	47d0      	blx	sl
 800957c:	3001      	adds	r0, #1
 800957e:	d0ad      	beq.n	80094dc <_printf_i+0x15c>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	079b      	lsls	r3, r3, #30
 8009584:	d413      	bmi.n	80095ae <_printf_i+0x22e>
 8009586:	68e0      	ldr	r0, [r4, #12]
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	4298      	cmp	r0, r3
 800958c:	bfb8      	it	lt
 800958e:	4618      	movlt	r0, r3
 8009590:	e7a6      	b.n	80094e0 <_printf_i+0x160>
 8009592:	2301      	movs	r3, #1
 8009594:	4632      	mov	r2, r6
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d09d      	beq.n	80094dc <_printf_i+0x15c>
 80095a0:	3501      	adds	r5, #1
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	9903      	ldr	r1, [sp, #12]
 80095a6:	1a5b      	subs	r3, r3, r1
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dcf2      	bgt.n	8009592 <_printf_i+0x212>
 80095ac:	e7eb      	b.n	8009586 <_printf_i+0x206>
 80095ae:	2500      	movs	r5, #0
 80095b0:	f104 0619 	add.w	r6, r4, #25
 80095b4:	e7f5      	b.n	80095a2 <_printf_i+0x222>
 80095b6:	bf00      	nop
 80095b8:	08009a4d 	.word	0x08009a4d
 80095bc:	08009a5e 	.word	0x08009a5e

080095c0 <__sflush_r>:
 80095c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	0716      	lsls	r6, r2, #28
 80095ca:	4605      	mov	r5, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	d454      	bmi.n	800967a <__sflush_r+0xba>
 80095d0:	684b      	ldr	r3, [r1, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dc02      	bgt.n	80095dc <__sflush_r+0x1c>
 80095d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dd48      	ble.n	800966e <__sflush_r+0xae>
 80095dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095de:	2e00      	cmp	r6, #0
 80095e0:	d045      	beq.n	800966e <__sflush_r+0xae>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095e8:	682f      	ldr	r7, [r5, #0]
 80095ea:	6a21      	ldr	r1, [r4, #32]
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	d030      	beq.n	8009652 <__sflush_r+0x92>
 80095f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	0759      	lsls	r1, r3, #29
 80095f6:	d505      	bpl.n	8009604 <__sflush_r+0x44>
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095fe:	b10b      	cbz	r3, 8009604 <__sflush_r+0x44>
 8009600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	2300      	movs	r3, #0
 8009606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009608:	6a21      	ldr	r1, [r4, #32]
 800960a:	4628      	mov	r0, r5
 800960c:	47b0      	blx	r6
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	d106      	bne.n	8009622 <__sflush_r+0x62>
 8009614:	6829      	ldr	r1, [r5, #0]
 8009616:	291d      	cmp	r1, #29
 8009618:	d82b      	bhi.n	8009672 <__sflush_r+0xb2>
 800961a:	4a2a      	ldr	r2, [pc, #168]	@ (80096c4 <__sflush_r+0x104>)
 800961c:	410a      	asrs	r2, r1
 800961e:	07d6      	lsls	r6, r2, #31
 8009620:	d427      	bmi.n	8009672 <__sflush_r+0xb2>
 8009622:	2200      	movs	r2, #0
 8009624:	6062      	str	r2, [r4, #4]
 8009626:	04d9      	lsls	r1, r3, #19
 8009628:	6922      	ldr	r2, [r4, #16]
 800962a:	6022      	str	r2, [r4, #0]
 800962c:	d504      	bpl.n	8009638 <__sflush_r+0x78>
 800962e:	1c42      	adds	r2, r0, #1
 8009630:	d101      	bne.n	8009636 <__sflush_r+0x76>
 8009632:	682b      	ldr	r3, [r5, #0]
 8009634:	b903      	cbnz	r3, 8009638 <__sflush_r+0x78>
 8009636:	6560      	str	r0, [r4, #84]	@ 0x54
 8009638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800963a:	602f      	str	r7, [r5, #0]
 800963c:	b1b9      	cbz	r1, 800966e <__sflush_r+0xae>
 800963e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009642:	4299      	cmp	r1, r3
 8009644:	d002      	beq.n	800964c <__sflush_r+0x8c>
 8009646:	4628      	mov	r0, r5
 8009648:	f7ff fbf2 	bl	8008e30 <_free_r>
 800964c:	2300      	movs	r3, #0
 800964e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009650:	e00d      	b.n	800966e <__sflush_r+0xae>
 8009652:	2301      	movs	r3, #1
 8009654:	4628      	mov	r0, r5
 8009656:	47b0      	blx	r6
 8009658:	4602      	mov	r2, r0
 800965a:	1c50      	adds	r0, r2, #1
 800965c:	d1c9      	bne.n	80095f2 <__sflush_r+0x32>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0c6      	beq.n	80095f2 <__sflush_r+0x32>
 8009664:	2b1d      	cmp	r3, #29
 8009666:	d001      	beq.n	800966c <__sflush_r+0xac>
 8009668:	2b16      	cmp	r3, #22
 800966a:	d11e      	bne.n	80096aa <__sflush_r+0xea>
 800966c:	602f      	str	r7, [r5, #0]
 800966e:	2000      	movs	r0, #0
 8009670:	e022      	b.n	80096b8 <__sflush_r+0xf8>
 8009672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009676:	b21b      	sxth	r3, r3
 8009678:	e01b      	b.n	80096b2 <__sflush_r+0xf2>
 800967a:	690f      	ldr	r7, [r1, #16]
 800967c:	2f00      	cmp	r7, #0
 800967e:	d0f6      	beq.n	800966e <__sflush_r+0xae>
 8009680:	0793      	lsls	r3, r2, #30
 8009682:	680e      	ldr	r6, [r1, #0]
 8009684:	bf08      	it	eq
 8009686:	694b      	ldreq	r3, [r1, #20]
 8009688:	600f      	str	r7, [r1, #0]
 800968a:	bf18      	it	ne
 800968c:	2300      	movne	r3, #0
 800968e:	eba6 0807 	sub.w	r8, r6, r7
 8009692:	608b      	str	r3, [r1, #8]
 8009694:	f1b8 0f00 	cmp.w	r8, #0
 8009698:	dde9      	ble.n	800966e <__sflush_r+0xae>
 800969a:	6a21      	ldr	r1, [r4, #32]
 800969c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800969e:	4643      	mov	r3, r8
 80096a0:	463a      	mov	r2, r7
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b0      	blx	r6
 80096a6:	2800      	cmp	r0, #0
 80096a8:	dc08      	bgt.n	80096bc <__sflush_r+0xfc>
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	4407      	add	r7, r0
 80096be:	eba8 0800 	sub.w	r8, r8, r0
 80096c2:	e7e7      	b.n	8009694 <__sflush_r+0xd4>
 80096c4:	dfbffffe 	.word	0xdfbffffe

080096c8 <_fflush_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	4605      	mov	r5, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	b913      	cbnz	r3, 80096d8 <_fflush_r+0x10>
 80096d2:	2500      	movs	r5, #0
 80096d4:	4628      	mov	r0, r5
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	b118      	cbz	r0, 80096e2 <_fflush_r+0x1a>
 80096da:	6a03      	ldr	r3, [r0, #32]
 80096dc:	b90b      	cbnz	r3, 80096e2 <_fflush_r+0x1a>
 80096de:	f7ff fa3b 	bl	8008b58 <__sinit>
 80096e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0f3      	beq.n	80096d2 <_fflush_r+0xa>
 80096ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096ec:	07d0      	lsls	r0, r2, #31
 80096ee:	d404      	bmi.n	80096fa <_fflush_r+0x32>
 80096f0:	0599      	lsls	r1, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_fflush_r+0x32>
 80096f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f6:	f7ff fb8a 	bl	8008e0e <__retarget_lock_acquire_recursive>
 80096fa:	4628      	mov	r0, r5
 80096fc:	4621      	mov	r1, r4
 80096fe:	f7ff ff5f 	bl	80095c0 <__sflush_r>
 8009702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009704:	07da      	lsls	r2, r3, #31
 8009706:	4605      	mov	r5, r0
 8009708:	d4e4      	bmi.n	80096d4 <_fflush_r+0xc>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	059b      	lsls	r3, r3, #22
 800970e:	d4e1      	bmi.n	80096d4 <_fflush_r+0xc>
 8009710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009712:	f7ff fb7d 	bl	8008e10 <__retarget_lock_release_recursive>
 8009716:	e7dd      	b.n	80096d4 <_fflush_r+0xc>

08009718 <__swbuf_r>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	460e      	mov	r6, r1
 800971c:	4614      	mov	r4, r2
 800971e:	4605      	mov	r5, r0
 8009720:	b118      	cbz	r0, 800972a <__swbuf_r+0x12>
 8009722:	6a03      	ldr	r3, [r0, #32]
 8009724:	b90b      	cbnz	r3, 800972a <__swbuf_r+0x12>
 8009726:	f7ff fa17 	bl	8008b58 <__sinit>
 800972a:	69a3      	ldr	r3, [r4, #24]
 800972c:	60a3      	str	r3, [r4, #8]
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	071a      	lsls	r2, r3, #28
 8009732:	d501      	bpl.n	8009738 <__swbuf_r+0x20>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	b943      	cbnz	r3, 800974a <__swbuf_r+0x32>
 8009738:	4621      	mov	r1, r4
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f82a 	bl	8009794 <__swsetup_r>
 8009740:	b118      	cbz	r0, 800974a <__swbuf_r+0x32>
 8009742:	f04f 37ff 	mov.w	r7, #4294967295
 8009746:	4638      	mov	r0, r7
 8009748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	6922      	ldr	r2, [r4, #16]
 800974e:	1a98      	subs	r0, r3, r2
 8009750:	6963      	ldr	r3, [r4, #20]
 8009752:	b2f6      	uxtb	r6, r6
 8009754:	4283      	cmp	r3, r0
 8009756:	4637      	mov	r7, r6
 8009758:	dc05      	bgt.n	8009766 <__swbuf_r+0x4e>
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f7ff ffb3 	bl	80096c8 <_fflush_r>
 8009762:	2800      	cmp	r0, #0
 8009764:	d1ed      	bne.n	8009742 <__swbuf_r+0x2a>
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	3b01      	subs	r3, #1
 800976a:	60a3      	str	r3, [r4, #8]
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	701e      	strb	r6, [r3, #0]
 8009774:	6962      	ldr	r2, [r4, #20]
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	429a      	cmp	r2, r3
 800977a:	d004      	beq.n	8009786 <__swbuf_r+0x6e>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	07db      	lsls	r3, r3, #31
 8009780:	d5e1      	bpl.n	8009746 <__swbuf_r+0x2e>
 8009782:	2e0a      	cmp	r6, #10
 8009784:	d1df      	bne.n	8009746 <__swbuf_r+0x2e>
 8009786:	4621      	mov	r1, r4
 8009788:	4628      	mov	r0, r5
 800978a:	f7ff ff9d 	bl	80096c8 <_fflush_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	d0d9      	beq.n	8009746 <__swbuf_r+0x2e>
 8009792:	e7d6      	b.n	8009742 <__swbuf_r+0x2a>

08009794 <__swsetup_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4b29      	ldr	r3, [pc, #164]	@ (800983c <__swsetup_r+0xa8>)
 8009798:	4605      	mov	r5, r0
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	460c      	mov	r4, r1
 800979e:	b118      	cbz	r0, 80097a8 <__swsetup_r+0x14>
 80097a0:	6a03      	ldr	r3, [r0, #32]
 80097a2:	b90b      	cbnz	r3, 80097a8 <__swsetup_r+0x14>
 80097a4:	f7ff f9d8 	bl	8008b58 <__sinit>
 80097a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ac:	0719      	lsls	r1, r3, #28
 80097ae:	d422      	bmi.n	80097f6 <__swsetup_r+0x62>
 80097b0:	06da      	lsls	r2, r3, #27
 80097b2:	d407      	bmi.n	80097c4 <__swsetup_r+0x30>
 80097b4:	2209      	movs	r2, #9
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295
 80097c2:	e033      	b.n	800982c <__swsetup_r+0x98>
 80097c4:	0758      	lsls	r0, r3, #29
 80097c6:	d512      	bpl.n	80097ee <__swsetup_r+0x5a>
 80097c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ca:	b141      	cbz	r1, 80097de <__swsetup_r+0x4a>
 80097cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d002      	beq.n	80097da <__swsetup_r+0x46>
 80097d4:	4628      	mov	r0, r5
 80097d6:	f7ff fb2b 	bl	8008e30 <_free_r>
 80097da:	2300      	movs	r3, #0
 80097dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f043 0308 	orr.w	r3, r3, #8
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b94b      	cbnz	r3, 800980e <__swsetup_r+0x7a>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009804:	d003      	beq.n	800980e <__swsetup_r+0x7a>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 f84f 	bl	80098ac <__smakebuf_r>
 800980e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009812:	f013 0201 	ands.w	r2, r3, #1
 8009816:	d00a      	beq.n	800982e <__swsetup_r+0x9a>
 8009818:	2200      	movs	r2, #0
 800981a:	60a2      	str	r2, [r4, #8]
 800981c:	6962      	ldr	r2, [r4, #20]
 800981e:	4252      	negs	r2, r2
 8009820:	61a2      	str	r2, [r4, #24]
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	b942      	cbnz	r2, 8009838 <__swsetup_r+0xa4>
 8009826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800982a:	d1c5      	bne.n	80097b8 <__swsetup_r+0x24>
 800982c:	bd38      	pop	{r3, r4, r5, pc}
 800982e:	0799      	lsls	r1, r3, #30
 8009830:	bf58      	it	pl
 8009832:	6962      	ldrpl	r2, [r4, #20]
 8009834:	60a2      	str	r2, [r4, #8]
 8009836:	e7f4      	b.n	8009822 <__swsetup_r+0x8e>
 8009838:	2000      	movs	r0, #0
 800983a:	e7f7      	b.n	800982c <__swsetup_r+0x98>
 800983c:	2000001c 	.word	0x2000001c

08009840 <_sbrk_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	@ (800985c <_sbrk_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f7 ff86 	bl	800175c <_sbrk>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_sbrk_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_sbrk_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20004ca4 	.word	0x20004ca4

08009860 <__swhatbuf_r>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	460c      	mov	r4, r1
 8009864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009868:	2900      	cmp	r1, #0
 800986a:	b096      	sub	sp, #88	@ 0x58
 800986c:	4615      	mov	r5, r2
 800986e:	461e      	mov	r6, r3
 8009870:	da0d      	bge.n	800988e <__swhatbuf_r+0x2e>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009878:	f04f 0100 	mov.w	r1, #0
 800987c:	bf14      	ite	ne
 800987e:	2340      	movne	r3, #64	@ 0x40
 8009880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009884:	2000      	movs	r0, #0
 8009886:	6031      	str	r1, [r6, #0]
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	b016      	add	sp, #88	@ 0x58
 800988c:	bd70      	pop	{r4, r5, r6, pc}
 800988e:	466a      	mov	r2, sp
 8009890:	f000 f848 	bl	8009924 <_fstat_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	dbec      	blt.n	8009872 <__swhatbuf_r+0x12>
 8009898:	9901      	ldr	r1, [sp, #4]
 800989a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800989e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098a2:	4259      	negs	r1, r3
 80098a4:	4159      	adcs	r1, r3
 80098a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098aa:	e7eb      	b.n	8009884 <__swhatbuf_r+0x24>

080098ac <__smakebuf_r>:
 80098ac:	898b      	ldrh	r3, [r1, #12]
 80098ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b0:	079d      	lsls	r5, r3, #30
 80098b2:	4606      	mov	r6, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	d507      	bpl.n	80098c8 <__smakebuf_r+0x1c>
 80098b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	6123      	str	r3, [r4, #16]
 80098c0:	2301      	movs	r3, #1
 80098c2:	6163      	str	r3, [r4, #20]
 80098c4:	b003      	add	sp, #12
 80098c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c8:	ab01      	add	r3, sp, #4
 80098ca:	466a      	mov	r2, sp
 80098cc:	f7ff ffc8 	bl	8009860 <__swhatbuf_r>
 80098d0:	9f00      	ldr	r7, [sp, #0]
 80098d2:	4605      	mov	r5, r0
 80098d4:	4639      	mov	r1, r7
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7ff fb16 	bl	8008f08 <_malloc_r>
 80098dc:	b948      	cbnz	r0, 80098f2 <__smakebuf_r+0x46>
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	059a      	lsls	r2, r3, #22
 80098e4:	d4ee      	bmi.n	80098c4 <__smakebuf_r+0x18>
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	f043 0302 	orr.w	r3, r3, #2
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	e7e2      	b.n	80098b8 <__smakebuf_r+0xc>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	6020      	str	r0, [r4, #0]
 80098f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098fa:	81a3      	strh	r3, [r4, #12]
 80098fc:	9b01      	ldr	r3, [sp, #4]
 80098fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009902:	b15b      	cbz	r3, 800991c <__smakebuf_r+0x70>
 8009904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009908:	4630      	mov	r0, r6
 800990a:	f000 f81d 	bl	8009948 <_isatty_r>
 800990e:	b128      	cbz	r0, 800991c <__smakebuf_r+0x70>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	f023 0303 	bic.w	r3, r3, #3
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	81a3      	strh	r3, [r4, #12]
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	431d      	orrs	r5, r3
 8009920:	81a5      	strh	r5, [r4, #12]
 8009922:	e7cf      	b.n	80098c4 <__smakebuf_r+0x18>

08009924 <_fstat_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	@ (8009944 <_fstat_r+0x20>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f7f7 feea 	bl	800170a <_fstat>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d102      	bne.n	8009940 <_fstat_r+0x1c>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	b103      	cbz	r3, 8009940 <_fstat_r+0x1c>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	20004ca4 	.word	0x20004ca4

08009948 <_isatty_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d06      	ldr	r5, [pc, #24]	@ (8009964 <_isatty_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7f7 fee9 	bl	800172a <_isatty>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_isatty_r+0x1a>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_isatty_r+0x1a>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20004ca4 	.word	0x20004ca4

08009968 <_init>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	bf00      	nop
 800996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996e:	bc08      	pop	{r3}
 8009970:	469e      	mov	lr, r3
 8009972:	4770      	bx	lr

08009974 <_fini>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr
